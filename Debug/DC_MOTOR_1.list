
DC_MOTOR_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aec  08003aec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003af4  08003af4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000074  08003b70  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003b70  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3ad  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185a  00000000  00000000  0002c451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163a9  00000000  00000000  0002f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cce9  00000000  00000000  000456d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4e5  00000000  00000000  000523ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df89f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  000df8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a60 	.word	0x08003a60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003a60 	.word	0x08003a60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fcc6 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f96a 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 faae 	bl	8000af0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000594:	f000 f9d0 	bl	8000938 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000598:	f000 fa80 	bl	8000a9c <MX_USART6_UART_Init>
  MX_TIM5_Init();
 800059c:	f000 fa24 	bl	80009e8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA,A1_Pin,GPIO_PIN_SET);   // Start first motor clock wise rotation
 80005a0:	2201      	movs	r2, #1
 80005a2:	2102      	movs	r1, #2
 80005a4:	489e      	ldr	r0, [pc, #632]	; (8000820 <main+0x29c>)
 80005a6:	f000 ffcf 	bl	8001548 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,A2_Pin,GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2110      	movs	r1, #16
 80005ae:	489c      	ldr	r0, [pc, #624]	; (8000820 <main+0x29c>)
 80005b0:	f000 ffca 	bl	8001548 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,100);
 80005b4:	4b9b      	ldr	r3, [pc, #620]	; (8000824 <main+0x2a0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2264      	movs	r2, #100	; 0x64
 80005ba:	635a      	str	r2, [r3, #52]	; 0x34
  //HAL_GPIO_WritePin(GPIOA,A3_Pin,GPIO_PIN_SET);   //Start second motor clock wise rotation
  //HAL_GPIO_WritePin(GPIOA,A4_Pin,GPIO_PIN_RESET);
  HAL_TIM_Base_Start(&htim2);               //Initialize stm32 timer 3
 80005bc:	4899      	ldr	r0, [pc, #612]	; (8000824 <main+0x2a0>)
 80005be:	f001 fc8f 	bl	8001ee0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4897      	ldr	r0, [pc, #604]	; (8000824 <main+0x2a0>)
 80005c6:	f001 fd35 	bl	8002034 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 80005ca:	2100      	movs	r1, #0
 80005cc:	4896      	ldr	r0, [pc, #600]	; (8000828 <main+0x2a4>)
 80005ce:	f001 fd31 	bl	8002034 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Change direction of motors anti clock wise
HAL_UART_Receive(&huart6, (uint8_t*)rx_buffer, 50, 500);
 80005d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005d6:	2232      	movs	r2, #50	; 0x32
 80005d8:	4994      	ldr	r1, [pc, #592]	; (800082c <main+0x2a8>)
 80005da:	4895      	ldr	r0, [pc, #596]	; (8000830 <main+0x2ac>)
 80005dc:	f002 fa1b 	bl	8002a16 <HAL_UART_Receive>
if(rx_buffer[0] == 'F')
 80005e0:	4b92      	ldr	r3, [pc, #584]	; (800082c <main+0x2a8>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b46      	cmp	r3, #70	; 0x46
 80005e6:	d121      	bne.n	800062c <main+0xa8>
{

if(!goingforward)
 80005e8:	4b92      	ldr	r3, [pc, #584]	; (8000834 <main+0x2b0>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00d      	beq.n	8000612 <main+0x8e>
{
	goingforward=true;
 80005f6:	4b8f      	ldr	r3, [pc, #572]	; (8000834 <main+0x2b0>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA,A1_Pin);
 80005fc:	2102      	movs	r1, #2
 80005fe:	4888      	ldr	r0, [pc, #544]	; (8000820 <main+0x29c>)
 8000600:	f000 ffbb 	bl	800157a <HAL_GPIO_TogglePin>
	HAL_Delay(100); //Delay for 3 seconds to stop motor properly
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f000 fcf9 	bl	8000ffc <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA,A2_Pin);
 800060a:	2110      	movs	r1, #16
 800060c:	4884      	ldr	r0, [pc, #528]	; (8000820 <main+0x29c>)
 800060e:	f000 ffb4 	bl	800157a <HAL_GPIO_TogglePin>
}

HAL_UART_Transmit(&huart6,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Led is on\n"),500);
 8000612:	4989      	ldr	r1, [pc, #548]	; (8000838 <main+0x2b4>)
 8000614:	4889      	ldr	r0, [pc, #548]	; (800083c <main+0x2b8>)
 8000616:	f002 fdb5 	bl	8003184 <siprintf>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000622:	4986      	ldr	r1, [pc, #536]	; (800083c <main+0x2b8>)
 8000624:	4882      	ldr	r0, [pc, #520]	; (8000830 <main+0x2ac>)
 8000626:	f002 f964 	bl	80028f2 <HAL_UART_Transmit>
 800062a:	e096      	b.n	800075a <main+0x1d6>

}
else if(rx_buffer[0] == 'B')
 800062c:	4b7f      	ldr	r3, [pc, #508]	; (800082c <main+0x2a8>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b42      	cmp	r3, #66	; 0x42
 8000632:	d11e      	bne.n	8000672 <main+0xee>
	  {
	if(goingforward)
 8000634:	4b7f      	ldr	r3, [pc, #508]	; (8000834 <main+0x2b0>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00d      	beq.n	8000658 <main+0xd4>
	{
	HAL_GPIO_TogglePin(GPIOA,A1_Pin);
 800063c:	2102      	movs	r1, #2
 800063e:	4878      	ldr	r0, [pc, #480]	; (8000820 <main+0x29c>)
 8000640:	f000 ff9b 	bl	800157a <HAL_GPIO_TogglePin>
	HAL_Delay(100); //Delay for 3 seconds to stop motor properly
 8000644:	2064      	movs	r0, #100	; 0x64
 8000646:	f000 fcd9 	bl	8000ffc <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA,A2_Pin);
 800064a:	2110      	movs	r1, #16
 800064c:	4874      	ldr	r0, [pc, #464]	; (8000820 <main+0x29c>)
 800064e:	f000 ff94 	bl	800157a <HAL_GPIO_TogglePin>

	goingforward=false;
 8000652:	4b78      	ldr	r3, [pc, #480]	; (8000834 <main+0x2b0>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
	}
	  HAL_UART_Transmit(&huart6,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Led is off\n"),500);
 8000658:	4979      	ldr	r1, [pc, #484]	; (8000840 <main+0x2bc>)
 800065a:	4878      	ldr	r0, [pc, #480]	; (800083c <main+0x2b8>)
 800065c:	f002 fd92 	bl	8003184 <siprintf>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000668:	4974      	ldr	r1, [pc, #464]	; (800083c <main+0x2b8>)
 800066a:	4871      	ldr	r0, [pc, #452]	; (8000830 <main+0x2ac>)
 800066c:	f002 f941 	bl	80028f2 <HAL_UART_Transmit>
 8000670:	e073      	b.n	800075a <main+0x1d6>

}

else if(rx_buffer[0] == 'L')
 8000672:	4b6e      	ldr	r3, [pc, #440]	; (800082c <main+0x2a8>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b4c      	cmp	r3, #76	; 0x4c
 8000678:	d137      	bne.n	80006ea <main+0x166>
{
	 //for (i=500;i<=2500;i++)
	 i+=20;
 800067a:	4b72      	ldr	r3, [pc, #456]	; (8000844 <main+0x2c0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3314      	adds	r3, #20
 8000680:	4a70      	ldr	r2, [pc, #448]	; (8000844 <main+0x2c0>)
 8000682:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 8000684:	4b6f      	ldr	r3, [pc, #444]	; (8000844 <main+0x2c0>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b66      	ldr	r3, [pc, #408]	; (8000824 <main+0x2a0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(.1);
 800068e:	2000      	movs	r0, #0
 8000690:	f000 fcb4 	bl	8000ffc <HAL_Delay>
	 // }
	  if(led_state!=true)
 8000694:	4b6c      	ldr	r3, [pc, #432]	; (8000848 <main+0x2c4>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	f083 0301 	eor.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00b      	beq.n	80006ba <main+0x136>
	  HAL_UART_Transmit(&huart6,(uint8_t*)tx_buffer,sprintf(tx_buffer,"Led is on\n"),500);
 80006a2:	4965      	ldr	r1, [pc, #404]	; (8000838 <main+0x2b4>)
 80006a4:	4865      	ldr	r0, [pc, #404]	; (800083c <main+0x2b8>)
 80006a6:	f002 fd6d 	bl	8003184 <siprintf>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006b2:	4962      	ldr	r1, [pc, #392]	; (800083c <main+0x2b8>)
 80006b4:	485e      	ldr	r0, [pc, #376]	; (8000830 <main+0x2ac>)
 80006b6:	f002 f91c 	bl	80028f2 <HAL_UART_Transmit>
	  led_state = true;
 80006ba:	4b63      	ldr	r3, [pc, #396]	; (8000848 <main+0x2c4>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
	  for(a=0;a<50;a++)
 80006c0:	4b62      	ldr	r3, [pc, #392]	; (800084c <main+0x2c8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e00b      	b.n	80006e0 <main+0x15c>
	  {
		  rx_buffer[a]=0;
 80006c8:	4b60      	ldr	r3, [pc, #384]	; (800084c <main+0x2c8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b57      	ldr	r3, [pc, #348]	; (800082c <main+0x2a8>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	5499      	strb	r1, [r3, r2]
	  for(a=0;a<50;a++)
 80006d4:	4b5d      	ldr	r3, [pc, #372]	; (800084c <main+0x2c8>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b5b      	ldr	r3, [pc, #364]	; (800084c <main+0x2c8>)
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	4b5a      	ldr	r3, [pc, #360]	; (800084c <main+0x2c8>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b31      	cmp	r3, #49	; 0x31
 80006e6:	d9ef      	bls.n	80006c8 <main+0x144>
 80006e8:	e037      	b.n	800075a <main+0x1d6>
	  }
}
else if(rx_buffer[0]=='R') {
 80006ea:	4b50      	ldr	r3, [pc, #320]	; (800082c <main+0x2a8>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b52      	cmp	r3, #82	; 0x52
 80006f0:	d133      	bne.n	800075a <main+0x1d6>
	// for (i=2500;i>=500;i--)
	 // {
	  	 i-=20;
 80006f2:	4b54      	ldr	r3, [pc, #336]	; (8000844 <main+0x2c0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3b14      	subs	r3, #20
 80006f8:	4a52      	ldr	r2, [pc, #328]	; (8000844 <main+0x2c0>)
 80006fa:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 80006fc:	4b51      	ldr	r3, [pc, #324]	; (8000844 <main+0x2c0>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b48      	ldr	r3, [pc, #288]	; (8000824 <main+0x2a0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(.01);
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fc78 	bl	8000ffc <HAL_Delay>
		  //testing
	 // }
	  if(led_state!=false)
 800070c:	4b4e      	ldr	r3, [pc, #312]	; (8000848 <main+0x2c4>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00b      	beq.n	800072c <main+0x1a8>
	  HAL_UART_Transmit(&huart6,(uint8_t*)tx_buffer,sprintf(tx_buffer," Led is off\n"),500);
 8000714:	494e      	ldr	r1, [pc, #312]	; (8000850 <main+0x2cc>)
 8000716:	4849      	ldr	r0, [pc, #292]	; (800083c <main+0x2b8>)
 8000718:	f002 fd34 	bl	8003184 <siprintf>
 800071c:	4603      	mov	r3, r0
 800071e:	b29a      	uxth	r2, r3
 8000720:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000724:	4945      	ldr	r1, [pc, #276]	; (800083c <main+0x2b8>)
 8000726:	4842      	ldr	r0, [pc, #264]	; (8000830 <main+0x2ac>)
 8000728:	f002 f8e3 	bl	80028f2 <HAL_UART_Transmit>
	  led_state = false;
 800072c:	4b46      	ldr	r3, [pc, #280]	; (8000848 <main+0x2c4>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	  for(a=0;a<50;a++)
 8000732:	4b46      	ldr	r3, [pc, #280]	; (800084c <main+0x2c8>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	e00b      	b.n	8000752 <main+0x1ce>
	  {
		  rx_buffer[a]=0;
 800073a:	4b44      	ldr	r3, [pc, #272]	; (800084c <main+0x2c8>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	4b3a      	ldr	r3, [pc, #232]	; (800082c <main+0x2a8>)
 8000742:	2100      	movs	r1, #0
 8000744:	5499      	strb	r1, [r3, r2]
	  for(a=0;a<50;a++)
 8000746:	4b41      	ldr	r3, [pc, #260]	; (800084c <main+0x2c8>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b3f      	ldr	r3, [pc, #252]	; (800084c <main+0x2c8>)
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <main+0x2c8>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b31      	cmp	r3, #49	; 0x31
 8000758:	d9ef      	bls.n	800073a <main+0x1b6>
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,100);
	//clockwise = true;
}
*/

if(HAL_GPIO_ReadPin(B8_GPIO_Port,B8_Pin)&&buttonone) //Motor rotate at 75% duty cycle
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	483d      	ldr	r0, [pc, #244]	; (8000854 <main+0x2d0>)
 8000760:	f000 feda 	bl	8001518 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d00b      	beq.n	8000782 <main+0x1fe>
 800076a:	4b3b      	ldr	r3, [pc, #236]	; (8000858 <main+0x2d4>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d007      	beq.n	8000782 <main+0x1fe>
{
	/*__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,100);
	HAL_Delay(1000);*/
	__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,100);
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <main+0x2a4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2264      	movs	r2, #100	; 0x64
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
	buttonone=false;
 800077a:	4b37      	ldr	r3, [pc, #220]	; (8000858 <main+0x2d4>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e00a      	b.n	8000798 <main+0x214>
			//__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,75); //Second motor 75% voltage//Second motor 75% voltage

}
else if(HAL_GPIO_ReadPin(B8_GPIO_Port, B8_Pin)==GPIO_PIN_RESET)
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	4833      	ldr	r0, [pc, #204]	; (8000854 <main+0x2d0>)
 8000788:	f000 fec6 	bl	8001518 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d102      	bne.n	8000798 <main+0x214>
	  {
buttonone=true;
 8000792:	4b31      	ldr	r3, [pc, #196]	; (8000858 <main+0x2d4>)
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]


}
if(HAL_GPIO_ReadPin(B7_GPIO_Port,B7_Pin)&&buttontwo) //Motor rotate at 50% duty cycle
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	482e      	ldr	r0, [pc, #184]	; (8000854 <main+0x2d0>)
 800079c:	f000 febc 	bl	8001518 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00b      	beq.n	80007be <main+0x23a>
 80007a6:	4b2d      	ldr	r3, [pc, #180]	; (800085c <main+0x2d8>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d007      	beq.n	80007be <main+0x23a>
		{
			__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,0);
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <main+0x2a4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
			buttontwo=false;//Second motor 50% voltage
 80007b6:	4b29      	ldr	r3, [pc, #164]	; (800085c <main+0x2d8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	e009      	b.n	80007d2 <main+0x24e>
			//__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,50); //Second motor 50% voltage
		}
else if(HAL_GPIO_ReadPin(B7_GPIO_Port, B7_Pin)==GPIO_PIN_RESET)
 80007be:	2180      	movs	r1, #128	; 0x80
 80007c0:	4824      	ldr	r0, [pc, #144]	; (8000854 <main+0x2d0>)
 80007c2:	f000 fea9 	bl	8001518 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <main+0x24e>
	  {
buttontwo=true;
 80007cc:	4b23      	ldr	r3, [pc, #140]	; (800085c <main+0x2d8>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]


}

if(HAL_GPIO_ReadPin(B6_GPIO_Port,B6_Pin)&&buttonthree) //Motor rotate at 25% duty cycle
 80007d2:	2140      	movs	r1, #64	; 0x40
 80007d4:	481f      	ldr	r0, [pc, #124]	; (8000854 <main+0x2d0>)
 80007d6:	f000 fe9f 	bl	8001518 <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d013      	beq.n	8000808 <main+0x284>
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <main+0x2dc>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00f      	beq.n	8000808 <main+0x284>
		{
			__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,100);
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <main+0x2a4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2264      	movs	r2, #100	; 0x64
 80007ee:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 80007f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f4:	f000 fc02 	bl	8000ffc <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,50);
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <main+0x2a4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2232      	movs	r2, #50	; 0x32
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
			buttonthree=false;//Second motor 25% voltage
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <main+0x2dc>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e00a      	b.n	800081e <main+0x29a>
			//__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,25); //Second motor 25% voltage
		}
else if(HAL_GPIO_ReadPin(B6_GPIO_Port, B6_Pin)==GPIO_PIN_RESET)
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4812      	ldr	r0, [pc, #72]	; (8000854 <main+0x2d0>)
 800080c:	f000 fe84 	bl	8001518 <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	f47f aedd 	bne.w	80005d2 <main+0x4e>
	  {
buttonthree=true;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <main+0x2dc>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
HAL_UART_Receive(&huart6, (uint8_t*)rx_buffer, 50, 500);
 800081e:	e6d8      	b.n	80005d2 <main+0x4e>
 8000820:	40020000 	.word	0x40020000
 8000824:	20000090 	.word	0x20000090
 8000828:	200000d8 	.word	0x200000d8
 800082c:	20000168 	.word	0x20000168
 8000830:	20000120 	.word	0x20000120
 8000834:	200001ce 	.word	0x200001ce
 8000838:	08003a78 	.word	0x08003a78
 800083c:	2000019c 	.word	0x2000019c
 8000840:	08003a84 	.word	0x08003a84
 8000844:	20000000 	.word	0x20000000
 8000848:	200001d2 	.word	0x200001d2
 800084c:	20000164 	.word	0x20000164
 8000850:	08003a90 	.word	0x08003a90
 8000854:	40020400 	.word	0x40020400
 8000858:	200001cf 	.word	0x200001cf
 800085c:	200001d0 	.word	0x200001d0
 8000860:	200001d1 	.word	0x200001d1

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2230      	movs	r2, #48	; 0x30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fc7e 	bl	8003174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a27      	ldr	r2, [pc, #156]	; (8000930 <SystemClock_Config+0xcc>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <SystemClock_Config+0xcc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a20      	ldr	r2, [pc, #128]	; (8000934 <SystemClock_Config+0xd0>)
 80008b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d8:	2304      	movs	r3, #4
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80008dc:	2354      	movs	r3, #84	; 0x54
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fe5f 	bl	80015b0 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008f8:	f000 f968 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2102      	movs	r1, #2
 8000918:	4618      	mov	r0, r3
 800091a:	f001 f8c1 	bl	8001aa0 <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000924:	f000 f952 	bl	8000bcc <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3750      	adds	r7, #80	; 0x50
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_TIM2_Init+0xac>)
 800095c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000960:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_TIM2_Init+0xac>)
 8000964:	2253      	movs	r2, #83	; 0x53
 8000966:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_TIM2_Init+0xac>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_TIM2_Init+0xac>)
 8000970:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000974:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_TIM2_Init+0xac>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_TIM2_Init+0xac>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000982:	4818      	ldr	r0, [pc, #96]	; (80009e4 <MX_TIM2_Init+0xac>)
 8000984:	f001 fb06 	bl	8001f94 <HAL_TIM_PWM_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800098e:	f000 f91d 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099a:	f107 0320 	add.w	r3, r7, #32
 800099e:	4619      	mov	r1, r3
 80009a0:	4810      	ldr	r0, [pc, #64]	; (80009e4 <MX_TIM2_Init+0xac>)
 80009a2:	f001 feeb 	bl	800277c <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009ac:	f000 f90e 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b0:	2360      	movs	r3, #96	; 0x60
 80009b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	4619      	mov	r1, r3
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_TIM2_Init+0xac>)
 80009c8:	f001 fbe4 	bl	8002194 <HAL_TIM_PWM_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80009d2:	f000 f8fb 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MX_TIM2_Init+0xac>)
 80009d8:	f000 f95c 	bl	8000c94 <HAL_TIM_MspPostInit>

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000090 	.word	0x20000090

080009e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_TIM5_Init+0xac>)
 8000a0c:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <MX_TIM5_Init+0xb0>)
 8000a0e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8399;
 8000a10:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <MX_TIM5_Init+0xac>)
 8000a12:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000a16:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_TIM5_Init+0xac>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_TIM5_Init+0xac>)
 8000a20:	2263      	movs	r2, #99	; 0x63
 8000a22:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_TIM5_Init+0xac>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_TIM5_Init+0xac>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a30:	4818      	ldr	r0, [pc, #96]	; (8000a94 <MX_TIM5_Init+0xac>)
 8000a32:	f001 faaf 	bl	8001f94 <HAL_TIM_PWM_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 f8c6 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a48:	f107 0320 	add.w	r3, r7, #32
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_TIM5_Init+0xac>)
 8000a50:	f001 fe94 	bl	800277c <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000a5a:	f000 f8b7 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5e:	2360      	movs	r3, #96	; 0x60
 8000a60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	4619      	mov	r1, r3
 8000a74:	4807      	ldr	r0, [pc, #28]	; (8000a94 <MX_TIM5_Init+0xac>)
 8000a76:	f001 fb8d 	bl	8002194 <HAL_TIM_PWM_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000a80:	f000 f8a4 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <MX_TIM5_Init+0xac>)
 8000a86:	f000 f905 	bl	8000c94 <HAL_TIM_MspPostInit>

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000d8 	.word	0x200000d8
 8000a98:	40000c00 	.word	0x40000c00

08000a9c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART6_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_USART6_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_USART6_UART_Init+0x4c>)
 8000aa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000aac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART6_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART6_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART6_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART6_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART6_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART6_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART6_UART_Init+0x4c>)
 8000ad4:	f001 fec0 	bl	8002858 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 f875 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000120 	.word	0x20000120
 8000aec:	40011400 	.word	0x40011400

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a2c      	ldr	r2, [pc, #176]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a25      	ldr	r2, [pc, #148]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A1_Pin|A2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2112      	movs	r1, #18
 8000b7a:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <MX_GPIO_Init+0xd4>)
 8000b7c:	f000 fce4 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A2_Pin;
 8000b80:	2312      	movs	r3, #18
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <MX_GPIO_Init+0xd4>)
 8000b98:	f000 fb3a 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : B6_Pin B7_Pin B8_Pin */
  GPIO_InitStruct.Pin = B6_Pin|B7_Pin|B8_Pin;
 8000b9c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_GPIO_Init+0xd8>)
 8000bb2:	f000 fb2d 	bl	8001210 <HAL_GPIO_Init>

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40020400 	.word	0x40020400

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c38:	d10e      	bne.n	8000c58 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <HAL_TIM_PWM_MspInit+0x64>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_TIM_PWM_MspInit+0x64>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_TIM_PWM_MspInit+0x64>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000c56:	e012      	b.n	8000c7e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <HAL_TIM_PWM_MspInit+0x68>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d10d      	bne.n	8000c7e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_TIM_PWM_MspInit+0x64>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_TIM_PWM_MspInit+0x64>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_TIM_PWM_MspInit+0x64>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40000c00 	.word	0x40000c00

08000c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb4:	d11e      	bne.n	8000cf4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <HAL_TIM_MspPostInit+0xb0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <HAL_TIM_MspPostInit+0xb0>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_TIM_MspPostInit+0xb0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cd2:	2320      	movs	r3, #32
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4816      	ldr	r0, [pc, #88]	; (8000d48 <HAL_TIM_MspPostInit+0xb4>)
 8000cee:	f000 fa8f 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000cf2:	e022      	b.n	8000d3a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_TIM_MspPostInit+0xb8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d11d      	bne.n	8000d3a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_TIM_MspPostInit+0xb0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <HAL_TIM_MspPostInit+0xb0>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_TIM_MspPostInit+0xb0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <HAL_TIM_MspPostInit+0xb4>)
 8000d36:	f000 fa6b 	bl	8001210 <HAL_GPIO_Init>
}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	; 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40000c00 	.word	0x40000c00

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a19      	ldr	r2, [pc, #100]	; (8000dd4 <HAL_UART_MspInit+0x84>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d12b      	bne.n	8000dca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d7c:	f043 0320 	orr.w	r3, r3, #32
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000daa:	23c0      	movs	r3, #192	; 0xc0
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000dba:	2308      	movs	r3, #8
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_UART_MspInit+0x8c>)
 8000dc6:	f000 fa23 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40011400 	.word	0x40011400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020800 	.word	0x40020800

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler+0x4>

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2c:	f000 f8c6 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <_sbrk+0x5c>)
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <_sbrk+0x60>)
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <_sbrk+0x64>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <_sbrk+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d207      	bcs.n	8000e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e64:	f002 f95c 	bl	8003120 <__errno>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	e009      	b.n	8000e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <_sbrk+0x64>)
 8000e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20018000 	.word	0x20018000
 8000e94:	00000400 	.word	0x00000400
 8000e98:	200001d4 	.word	0x200001d4
 8000e9c:	200001f0 	.word	0x200001f0

08000ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	; (8000f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eee:	f7ff ffd7 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f002 f91b 	bl	800312c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fb45 	bl	8000584 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000efc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f08:	08003afc 	.word	0x08003afc
  ldr r2, =_sbss
 8000f0c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f10:	200001ec 	.word	0x200001ec

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_Init+0x40>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_Init+0x40>)
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_Init+0x40>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f931 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	200f      	movs	r0, #15
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fe44 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f93b 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 f911 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	20000008 	.word	0x20000008

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2000000c 	.word	0x2000000c
 8000fe0:	200001d8 	.word	0x200001d8

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200001d8 	.word	0x200001d8

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000000c 	.word	0x2000000c

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff47 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff5c 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffb0 	bl	8001164 <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e159      	b.n	80014e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800122c:	2201      	movs	r2, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8148 	bne.w	80014da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	2b01      	cmp	r3, #1
 8001254:	d005      	beq.n	8001262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125e:	2b02      	cmp	r3, #2
 8001260:	d130      	bne.n	80012c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001298:	2201      	movs	r2, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 0201 	and.w	r2, r3, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d017      	beq.n	8001300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d123      	bne.n	8001354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	08da      	lsrs	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3208      	adds	r2, #8
 800134e:	69b9      	ldr	r1, [r7, #24]
 8001350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0203 	and.w	r2, r3, #3
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80a2 	beq.w	80014da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <HAL_GPIO_Init+0x2e8>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a56      	ldr	r2, [pc, #344]	; (80014f8 <HAL_GPIO_Init+0x2e8>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b54      	ldr	r3, [pc, #336]	; (80014f8 <HAL_GPIO_Init+0x2e8>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b2:	4a52      	ldr	r2, [pc, #328]	; (80014fc <HAL_GPIO_Init+0x2ec>)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a49      	ldr	r2, [pc, #292]	; (8001500 <HAL_GPIO_Init+0x2f0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d019      	beq.n	8001412 <HAL_GPIO_Init+0x202>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a48      	ldr	r2, [pc, #288]	; (8001504 <HAL_GPIO_Init+0x2f4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x1fe>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a47      	ldr	r2, [pc, #284]	; (8001508 <HAL_GPIO_Init+0x2f8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00d      	beq.n	800140a <HAL_GPIO_Init+0x1fa>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a46      	ldr	r2, [pc, #280]	; (800150c <HAL_GPIO_Init+0x2fc>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x1f6>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a45      	ldr	r2, [pc, #276]	; (8001510 <HAL_GPIO_Init+0x300>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_GPIO_Init+0x1f2>
 80013fe:	2304      	movs	r3, #4
 8001400:	e008      	b.n	8001414 <HAL_GPIO_Init+0x204>
 8001402:	2307      	movs	r3, #7
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x204>
 8001406:	2303      	movs	r3, #3
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x204>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x204>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x204>
 8001412:	2300      	movs	r3, #0
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	f002 0203 	and.w	r2, r2, #3
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4093      	lsls	r3, r2
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001424:	4935      	ldr	r1, [pc, #212]	; (80014fc <HAL_GPIO_Init+0x2ec>)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001432:	4b38      	ldr	r3, [pc, #224]	; (8001514 <HAL_GPIO_Init+0x304>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001456:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <HAL_GPIO_Init+0x304>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800145c:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_GPIO_Init+0x304>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001480:	4a24      	ldr	r2, [pc, #144]	; (8001514 <HAL_GPIO_Init+0x304>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_GPIO_Init+0x304>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014aa:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <HAL_GPIO_Init+0x304>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_GPIO_Init+0x304>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d4:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <HAL_GPIO_Init+0x304>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	f67f aea2 	bls.w	800122c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40013800 	.word	0x40013800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40013c00 	.word	0x40013c00

08001518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e001      	b.n	800153a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800158c:	887a      	ldrh	r2, [r7, #2]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4013      	ands	r3, r2
 8001592:	041a      	lsls	r2, r3, #16
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43d9      	mvns	r1, r3
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	400b      	ands	r3, r1
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	619a      	str	r2, [r3, #24]
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e267      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d075      	beq.n	80016ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d00c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015da:	4b85      	ldr	r3, [pc, #532]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d112      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e6:	4b82      	ldr	r3, [pc, #520]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f2:	d10b      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	4b7e      	ldr	r3, [pc, #504]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d05b      	beq.n	80016b8 <HAL_RCC_OscConfig+0x108>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d157      	bne.n	80016b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e242      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x74>
 8001616:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a75      	ldr	r2, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e01d      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x98>
 800162e:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6f      	ldr	r2, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6c      	ldr	r2, [pc, #432]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001648:	4b69      	ldr	r3, [pc, #420]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a68      	ldr	r2, [pc, #416]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a65      	ldr	r2, [pc, #404]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fcbc 	bl	8000fe4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fcb8 	bl	8000fe4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e207      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0xc0>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fca8 	bl	8000fe4 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fca4 	bl	8000fe4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1f3      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0xe8>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d063      	beq.n	800178e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d11c      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016de:	4b44      	ldr	r3, [pc, #272]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e1c7      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4937      	ldr	r1, [pc, #220]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	e03a      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff fc5d 	bl	8000fe4 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172e:	f7ff fc59 	bl	8000fe4 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1a8      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4925      	ldr	r1, [pc, #148]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fc3c 	bl	8000fe4 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fc38 	bl	8000fe4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e187      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d036      	beq.n	8001808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d016      	beq.n	80017d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff fc1c 	bl	8000fe4 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff fc18 	bl	8000fe4 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e167      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80017c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x200>
 80017ce:	e01b      	b.n	8001808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fc05 	bl	8000fe4 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	e00e      	b.n	80017fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fc01 	bl	8000fe4 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d907      	bls.n	80017fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e150      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	42470000 	.word	0x42470000
 80017f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ea      	bne.n	80017de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8097 	beq.w	8001944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10f      	bne.n	8001846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b7d      	ldr	r3, [pc, #500]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a7c      	ldr	r2, [pc, #496]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b7a      	ldr	r3, [pc, #488]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b77      	ldr	r3, [pc, #476]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b74      	ldr	r3, [pc, #464]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a73      	ldr	r2, [pc, #460]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7ff fbc1 	bl	8000fe4 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff fbbd 	bl	8000fe4 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e10c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x2ea>
 800188c:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	e01c      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x30c>
 80018a2:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a5e      	ldr	r2, [pc, #376]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
 80018ae:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a5b      	ldr	r2, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 80018bc:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a57      	ldr	r2, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	4b55      	ldr	r3, [pc, #340]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff fb82 	bl	8000fe4 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb7e 	bl	8000fe4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0cb      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fa:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ee      	beq.n	80018e4 <HAL_RCC_OscConfig+0x334>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fb6c 	bl	8000fe4 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff fb68 	bl	8000fe4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0b5      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ee      	bne.n	8001910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a1 	beq.w	8001a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b08      	cmp	r3, #8
 8001958:	d05c      	beq.n	8001a14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d141      	bne.n	80019e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fb3c 	bl	8000fe4 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fb38 	bl	8000fe4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e087      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	019b      	lsls	r3, r3, #6
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	3b01      	subs	r3, #1
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	491b      	ldr	r1, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff fb11 	bl	8000fe4 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff fb0d 	bl	8000fe4 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e05c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x416>
 80019e4:	e054      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fafa 	bl	8000fe4 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff faf6 	bl	8000fe4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e045      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x444>
 8001a12:	e03d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e038      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000
 8001a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_RCC_OscConfig+0x4ec>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d028      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d121      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d11a      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d111      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	085b      	lsrs	r3, r3, #1
 8001a74:	3b01      	subs	r3, #1
 8001a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0cc      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b68      	ldr	r3, [pc, #416]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d90c      	bls.n	8001adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b65      	ldr	r3, [pc, #404]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b8      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af4:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	494d      	ldr	r1, [pc, #308]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d044      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d119      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e07f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e067      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4934      	ldr	r1, [pc, #208]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b90:	f7ff fa28 	bl	8000fe4 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff fa24 	bl	8000fe4 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e04f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 020c 	and.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1eb      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d20c      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e032      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4916      	ldr	r1, [pc, #88]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	490e      	ldr	r1, [pc, #56]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c26:	f000 f821 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	490a      	ldr	r1, [pc, #40]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f988 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	08003aa0 	.word	0x08003aa0
 8001c64:	20000004 	.word	0x20000004
 8001c68:	20000008 	.word	0x20000008

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c70:	b094      	sub	sp, #80	; 0x50
 8001c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	647b      	str	r3, [r7, #68]	; 0x44
 8001c78:	2300      	movs	r3, #0
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c84:	4b79      	ldr	r3, [pc, #484]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d00d      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x40>
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	f200 80e1 	bhi.w	8001e58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c9e:	e0db      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ca2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ca4:	e0db      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca6:	4b73      	ldr	r3, [pc, #460]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ca8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001caa:	e0d8      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cac:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb6:	4b6d      	ldr	r3, [pc, #436]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d063      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	2200      	movs	r2, #0
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ccc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cde:	4622      	mov	r2, r4
 8001ce0:	462b      	mov	r3, r5
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	f04f 0100 	mov.w	r1, #0
 8001cea:	0159      	lsls	r1, r3, #5
 8001cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf0:	0150      	lsls	r0, r2, #5
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	1a51      	subs	r1, r2, r1
 8001cfa:	6139      	str	r1, [r7, #16]
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d10:	4659      	mov	r1, fp
 8001d12:	018b      	lsls	r3, r1, #6
 8001d14:	4651      	mov	r1, sl
 8001d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d1a:	4651      	mov	r1, sl
 8001d1c:	018a      	lsls	r2, r1, #6
 8001d1e:	4651      	mov	r1, sl
 8001d20:	ebb2 0801 	subs.w	r8, r2, r1
 8001d24:	4659      	mov	r1, fp
 8001d26:	eb63 0901 	sbc.w	r9, r3, r1
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d3e:	4690      	mov	r8, r2
 8001d40:	4699      	mov	r9, r3
 8001d42:	4623      	mov	r3, r4
 8001d44:	eb18 0303 	adds.w	r3, r8, r3
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	462b      	mov	r3, r5
 8001d4c:	eb49 0303 	adc.w	r3, r9, r3
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d5e:	4629      	mov	r1, r5
 8001d60:	024b      	lsls	r3, r1, #9
 8001d62:	4621      	mov	r1, r4
 8001d64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d68:	4621      	mov	r1, r4
 8001d6a:	024a      	lsls	r2, r1, #9
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d72:	2200      	movs	r2, #0
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d7c:	f7fe fa80 	bl	8000280 <__aeabi_uldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4613      	mov	r3, r2
 8001d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d88:	e058      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	2200      	movs	r2, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	4611      	mov	r1, r2
 8001d96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d9a:	623b      	str	r3, [r7, #32]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001da4:	4642      	mov	r2, r8
 8001da6:	464b      	mov	r3, r9
 8001da8:	f04f 0000 	mov.w	r0, #0
 8001dac:	f04f 0100 	mov.w	r1, #0
 8001db0:	0159      	lsls	r1, r3, #5
 8001db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db6:	0150      	lsls	r0, r2, #5
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4641      	mov	r1, r8
 8001dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8001de0:	eb63 050b 	sbc.w	r5, r3, fp
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	00eb      	lsls	r3, r5, #3
 8001dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df2:	00e2      	lsls	r2, r4, #3
 8001df4:	4614      	mov	r4, r2
 8001df6:	461d      	mov	r5, r3
 8001df8:	4643      	mov	r3, r8
 8001dfa:	18e3      	adds	r3, r4, r3
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	464b      	mov	r3, r9
 8001e00:	eb45 0303 	adc.w	r3, r5, r3
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e12:	4629      	mov	r1, r5
 8001e14:	028b      	lsls	r3, r1, #10
 8001e16:	4621      	mov	r1, r4
 8001e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	028a      	lsls	r2, r1, #10
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e26:	2200      	movs	r2, #0
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	61fa      	str	r2, [r7, #28]
 8001e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e30:	f7fe fa26 	bl	8000280 <__aeabi_uldivmod>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	3301      	adds	r3, #1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e56:	e002      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3750      	adds	r7, #80	; 0x50
 8001e64:	46bd      	mov	sp, r7
 8001e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	00f42400 	.word	0x00f42400
 8001e74:	007a1200 	.word	0x007a1200

08001e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e94:	f7ff fff0 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0a9b      	lsrs	r3, r3, #10
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	4903      	ldr	r1, [pc, #12]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	08003ab0 	.word	0x08003ab0

08001eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ebc:	f7ff ffdc 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0b5b      	lsrs	r3, r3, #13
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4903      	ldr	r1, [pc, #12]	; (8001edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	08003ab0 	.word	0x08003ab0

08001ee0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d001      	beq.n	8001ef8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e03c      	b.n	8001f72 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <HAL_TIM_Base_Start+0xa0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d018      	beq.n	8001f3c <HAL_TIM_Base_Start+0x5c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f12:	d013      	beq.n	8001f3c <HAL_TIM_Base_Start+0x5c>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <HAL_TIM_Base_Start+0xa4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00e      	beq.n	8001f3c <HAL_TIM_Base_Start+0x5c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <HAL_TIM_Base_Start+0xa8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d009      	beq.n	8001f3c <HAL_TIM_Base_Start+0x5c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_TIM_Base_Start+0xac>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d004      	beq.n	8001f3c <HAL_TIM_Base_Start+0x5c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <HAL_TIM_Base_Start+0xb0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d111      	bne.n	8001f60 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d010      	beq.n	8001f70 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5e:	e007      	b.n	8001f70 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	40000c00 	.word	0x40000c00
 8001f90:	40014000 	.word	0x40014000

08001f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e041      	b.n	800202a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fe34 	bl	8000c28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f000 f9a0 	bl	8002318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_TIM_PWM_Start+0x24>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	e022      	b.n	800209e <HAL_TIM_PWM_Start+0x6a>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b04      	cmp	r3, #4
 800205c:	d109      	bne.n	8002072 <HAL_TIM_PWM_Start+0x3e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b01      	cmp	r3, #1
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	e015      	b.n	800209e <HAL_TIM_PWM_Start+0x6a>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b08      	cmp	r3, #8
 8002076:	d109      	bne.n	800208c <HAL_TIM_PWM_Start+0x58>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	e008      	b.n	800209e <HAL_TIM_PWM_Start+0x6a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e068      	b.n	8002178 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d104      	bne.n	80020b6 <HAL_TIM_PWM_Start+0x82>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020b4:	e013      	b.n	80020de <HAL_TIM_PWM_Start+0xaa>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_PWM_Start+0x92>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020c4:	e00b      	b.n	80020de <HAL_TIM_PWM_Start+0xaa>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_PWM_Start+0xa2>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020d4:	e003      	b.n	80020de <HAL_TIM_PWM_Start+0xaa>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2202      	movs	r2, #2
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fb22 	bl	8002730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a23      	ldr	r2, [pc, #140]	; (8002180 <HAL_TIM_PWM_Start+0x14c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d107      	bne.n	8002106 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002104:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <HAL_TIM_PWM_Start+0x14c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d018      	beq.n	8002142 <HAL_TIM_PWM_Start+0x10e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002118:	d013      	beq.n	8002142 <HAL_TIM_PWM_Start+0x10e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_TIM_PWM_Start+0x150>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00e      	beq.n	8002142 <HAL_TIM_PWM_Start+0x10e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_TIM_PWM_Start+0x154>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_TIM_PWM_Start+0x10e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_TIM_PWM_Start+0x158>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d004      	beq.n	8002142 <HAL_TIM_PWM_Start+0x10e>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_TIM_PWM_Start+0x15c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d111      	bne.n	8002166 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b06      	cmp	r3, #6
 8002152:	d010      	beq.n	8002176 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002164:	e007      	b.n	8002176 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40010000 	.word	0x40010000
 8002184:	40000400 	.word	0x40000400
 8002188:	40000800 	.word	0x40000800
 800218c:	40000c00 	.word	0x40000c00
 8002190:	40014000 	.word	0x40014000

08002194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e0ae      	b.n	8002310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b0c      	cmp	r3, #12
 80021be:	f200 809f 	bhi.w	8002300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021c2:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	080021fd 	.word	0x080021fd
 80021cc:	08002301 	.word	0x08002301
 80021d0:	08002301 	.word	0x08002301
 80021d4:	08002301 	.word	0x08002301
 80021d8:	0800223d 	.word	0x0800223d
 80021dc:	08002301 	.word	0x08002301
 80021e0:	08002301 	.word	0x08002301
 80021e4:	08002301 	.word	0x08002301
 80021e8:	0800227f 	.word	0x0800227f
 80021ec:	08002301 	.word	0x08002301
 80021f0:	08002301 	.word	0x08002301
 80021f4:	08002301 	.word	0x08002301
 80021f8:	080022bf 	.word	0x080022bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f908 	bl	8002418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0208 	orr.w	r2, r2, #8
 8002216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0204 	bic.w	r2, r2, #4
 8002226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6999      	ldr	r1, [r3, #24]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	619a      	str	r2, [r3, #24]
      break;
 800223a:	e064      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f94e 	bl	80024e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6999      	ldr	r1, [r3, #24]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	021a      	lsls	r2, r3, #8
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	619a      	str	r2, [r3, #24]
      break;
 800227c:	e043      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f999 	bl	80025bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0208 	orr.w	r2, r2, #8
 8002298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0204 	bic.w	r2, r2, #4
 80022a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69d9      	ldr	r1, [r3, #28]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	61da      	str	r2, [r3, #28]
      break;
 80022bc:	e023      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f9e3 	bl	8002690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69d9      	ldr	r1, [r3, #28]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	021a      	lsls	r2, r3, #8
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	61da      	str	r2, [r3, #28]
      break;
 80022fe:	e002      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	75fb      	strb	r3, [r7, #23]
      break;
 8002304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800230e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a34      	ldr	r2, [pc, #208]	; (80023fc <TIM_Base_SetConfig+0xe4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00f      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d00b      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a31      	ldr	r2, [pc, #196]	; (8002400 <TIM_Base_SetConfig+0xe8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a30      	ldr	r2, [pc, #192]	; (8002404 <TIM_Base_SetConfig+0xec>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d003      	beq.n	8002350 <TIM_Base_SetConfig+0x38>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <TIM_Base_SetConfig+0xf0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d108      	bne.n	8002362 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a25      	ldr	r2, [pc, #148]	; (80023fc <TIM_Base_SetConfig+0xe4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01b      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002370:	d017      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a22      	ldr	r2, [pc, #136]	; (8002400 <TIM_Base_SetConfig+0xe8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a21      	ldr	r2, [pc, #132]	; (8002404 <TIM_Base_SetConfig+0xec>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00f      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a20      	ldr	r2, [pc, #128]	; (8002408 <TIM_Base_SetConfig+0xf0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00b      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a1f      	ldr	r2, [pc, #124]	; (800240c <TIM_Base_SetConfig+0xf4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <TIM_Base_SetConfig+0xf8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d003      	beq.n	80023a2 <TIM_Base_SetConfig+0x8a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <TIM_Base_SetConfig+0xfc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d108      	bne.n	80023b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a08      	ldr	r2, [pc, #32]	; (80023fc <TIM_Base_SetConfig+0xe4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d103      	bne.n	80023e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	615a      	str	r2, [r3, #20]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40010000 	.word	0x40010000
 8002400:	40000400 	.word	0x40000400
 8002404:	40000800 	.word	0x40000800
 8002408:	40000c00 	.word	0x40000c00
 800240c:	40014000 	.word	0x40014000
 8002410:	40014400 	.word	0x40014400
 8002414:	40014800 	.word	0x40014800

08002418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f023 0201 	bic.w	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f023 0302 	bic.w	r3, r3, #2
 8002460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <TIM_OC1_SetConfig+0xc8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d10c      	bne.n	800248e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f023 0308 	bic.w	r3, r3, #8
 800247a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <TIM_OC1_SetConfig+0xc8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d111      	bne.n	80024ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800249c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	621a      	str	r2, [r3, #32]
}
 80024d4:	bf00      	nop
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40010000 	.word	0x40010000

080024e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f023 0210 	bic.w	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f023 0320 	bic.w	r3, r3, #32
 800252e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <TIM_OC2_SetConfig+0xd4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d10d      	bne.n	8002560 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800254a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800255e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <TIM_OC2_SetConfig+0xd4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d113      	bne.n	8002590 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800256e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	621a      	str	r2, [r3, #32]
}
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40010000 	.word	0x40010000

080025bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0303 	bic.w	r3, r3, #3
 80025f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a1d      	ldr	r2, [pc, #116]	; (800268c <TIM_OC3_SetConfig+0xd0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10d      	bne.n	8002636 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <TIM_OC3_SetConfig+0xd0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d113      	bne.n	8002666 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800264c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	621a      	str	r2, [r3, #32]
}
 8002680:	bf00      	nop
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	40010000 	.word	0x40010000

08002690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	031b      	lsls	r3, r3, #12
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <TIM_OC4_SetConfig+0x9c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d109      	bne.n	8002704 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	019b      	lsls	r3, r3, #6
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	621a      	str	r2, [r3, #32]
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40010000 	.word	0x40010000

08002730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2201      	movs	r2, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1a      	ldr	r2, [r3, #32]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	43db      	mvns	r3, r3
 8002752:	401a      	ands	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1a      	ldr	r2, [r3, #32]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	431a      	orrs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	621a      	str	r2, [r3, #32]
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002790:	2302      	movs	r3, #2
 8002792:	e050      	b.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d018      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e0:	d013      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00e      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a16      	ldr	r2, [pc, #88]	; (800284c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a15      	ldr	r2, [pc, #84]	; (8002850 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a13      	ldr	r2, [pc, #76]	; (8002854 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10c      	bne.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40010000 	.word	0x40010000
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800
 8002850:	40000c00 	.word	0x40000c00
 8002854:	40014000 	.word	0x40014000

08002858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e03f      	b.n	80028ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe fa66 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	; 0x24
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800289a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f9cb 	bl	8002c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b08a      	sub	sp, #40	; 0x28
 80028f6:	af02      	add	r7, sp, #8
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b20      	cmp	r3, #32
 8002910:	d17c      	bne.n	8002a0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_UART_Transmit+0x2c>
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e075      	b.n	8002a0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_UART_Transmit+0x3e>
 800292c:	2302      	movs	r3, #2
 800292e:	e06e      	b.n	8002a0e <HAL_UART_Transmit+0x11c>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2221      	movs	r2, #33	; 0x21
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002946:	f7fe fb4d 	bl	8000fe4 <HAL_GetTick>
 800294a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	88fa      	ldrh	r2, [r7, #6]
 8002950:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	88fa      	ldrh	r2, [r7, #6]
 8002956:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002960:	d108      	bne.n	8002974 <HAL_UART_Transmit+0x82>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d104      	bne.n	8002974 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	e003      	b.n	800297c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002984:	e02a      	b.n	80029dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2200      	movs	r2, #0
 800298e:	2180      	movs	r1, #128	; 0x80
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f8e2 	bl	8002b5a <UART_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e036      	b.n	8002a0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10b      	bne.n	80029be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	3302      	adds	r3, #2
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	e007      	b.n	80029ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	3301      	adds	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1cf      	bne.n	8002986 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	2140      	movs	r1, #64	; 0x40
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f8b2 	bl	8002b5a <UART_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e006      	b.n	8002a0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b08a      	sub	sp, #40	; 0x28
 8002a1a:	af02      	add	r7, sp, #8
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	f040 808c 	bne.w	8002b50 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_UART_Receive+0x2e>
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e084      	b.n	8002b52 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_UART_Receive+0x40>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e07d      	b.n	8002b52 <HAL_UART_Receive+0x13c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2222      	movs	r2, #34	; 0x22
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a72:	f7fe fab7 	bl	8000fe4 <HAL_GetTick>
 8002a76:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	88fa      	ldrh	r2, [r7, #6]
 8002a7c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	88fa      	ldrh	r2, [r7, #6]
 8002a82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8c:	d108      	bne.n	8002aa0 <HAL_UART_Receive+0x8a>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d104      	bne.n	8002aa0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	e003      	b.n	8002aa8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ab0:	e043      	b.n	8002b3a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2120      	movs	r1, #32
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f84c 	bl	8002b5a <UART_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e042      	b.n	8002b52 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10c      	bne.n	8002aec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	e01f      	b.n	8002b2c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af4:	d007      	beq.n	8002b06 <HAL_UART_Receive+0xf0>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <HAL_UART_Receive+0xfe>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	e008      	b.n	8002b26 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1b6      	bne.n	8002ab2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e000      	b.n	8002b52 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002b50:	2302      	movs	r3, #2
  }
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b090      	sub	sp, #64	; 0x40
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	4613      	mov	r3, r2
 8002b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6a:	e050      	b.n	8002c0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d04c      	beq.n	8002c0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x30>
 8002b7a:	f7fe fa33 	bl	8000fe4 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d241      	bcs.n	8002c0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b94:	e853 3f00 	ldrex	r3, [r3]
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002baa:	637a      	str	r2, [r7, #52]	; 0x34
 8002bac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb2:	e841 2300 	strex	r3, r2, [r1]
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1e5      	bne.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3314      	adds	r3, #20
 8002bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	e853 3f00 	ldrex	r3, [r3]
 8002bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3314      	adds	r3, #20
 8002bdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bde:	623a      	str	r2, [r7, #32]
 8002be0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be2:	69f9      	ldr	r1, [r7, #28]
 8002be4:	6a3a      	ldr	r2, [r7, #32]
 8002be6:	e841 2300 	strex	r3, r2, [r1]
 8002bea:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1e5      	bne.n	8002bbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e00f      	b.n	8002c2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4013      	ands	r3, r2
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d09f      	beq.n	8002b6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3740      	adds	r7, #64	; 0x40
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c3c:	b0c0      	sub	sp, #256	; 0x100
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	68d9      	ldr	r1, [r3, #12]
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	ea40 0301 	orr.w	r3, r0, r1
 8002c60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c90:	f021 010c 	bic.w	r1, r1, #12
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb2:	6999      	ldr	r1, [r3, #24]
 8002cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	ea40 0301 	orr.w	r3, r0, r1
 8002cbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4b8f      	ldr	r3, [pc, #572]	; (8002f04 <UART_SetConfig+0x2cc>)
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d005      	beq.n	8002cd8 <UART_SetConfig+0xa0>
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b8d      	ldr	r3, [pc, #564]	; (8002f08 <UART_SetConfig+0x2d0>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d104      	bne.n	8002ce2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cd8:	f7ff f8ee 	bl	8001eb8 <HAL_RCC_GetPCLK2Freq>
 8002cdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ce0:	e003      	b.n	8002cea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ce2:	f7ff f8d5 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 8002ce6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf4:	f040 810c 	bne.w	8002f10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	1891      	adds	r1, r2, r2
 8002d10:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d12:	415b      	adcs	r3, r3
 8002d14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	eb12 0801 	adds.w	r8, r2, r1
 8002d20:	4629      	mov	r1, r5
 8002d22:	eb43 0901 	adc.w	r9, r3, r1
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d3a:	4690      	mov	r8, r2
 8002d3c:	4699      	mov	r9, r3
 8002d3e:	4623      	mov	r3, r4
 8002d40:	eb18 0303 	adds.w	r3, r8, r3
 8002d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d48:	462b      	mov	r3, r5
 8002d4a:	eb49 0303 	adc.w	r3, r9, r3
 8002d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d66:	460b      	mov	r3, r1
 8002d68:	18db      	adds	r3, r3, r3
 8002d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	eb42 0303 	adc.w	r3, r2, r3
 8002d72:	657b      	str	r3, [r7, #84]	; 0x54
 8002d74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d7c:	f7fd fa80 	bl	8000280 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002d86:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	011c      	lsls	r4, r3, #4
 8002d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002da0:	4642      	mov	r2, r8
 8002da2:	464b      	mov	r3, r9
 8002da4:	1891      	adds	r1, r2, r2
 8002da6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002da8:	415b      	adcs	r3, r3
 8002daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002db0:	4641      	mov	r1, r8
 8002db2:	eb12 0a01 	adds.w	sl, r2, r1
 8002db6:	4649      	mov	r1, r9
 8002db8:	eb43 0b01 	adc.w	fp, r3, r1
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd0:	4692      	mov	sl, r2
 8002dd2:	469b      	mov	fp, r3
 8002dd4:	4643      	mov	r3, r8
 8002dd6:	eb1a 0303 	adds.w	r3, sl, r3
 8002dda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dde:	464b      	mov	r3, r9
 8002de0:	eb4b 0303 	adc.w	r3, fp, r3
 8002de4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002df8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	18db      	adds	r3, r3, r3
 8002e00:	643b      	str	r3, [r7, #64]	; 0x40
 8002e02:	4613      	mov	r3, r2
 8002e04:	eb42 0303 	adc.w	r3, r2, r3
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e12:	f7fd fa35 	bl	8000280 <__aeabi_uldivmod>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2264      	movs	r2, #100	; 0x64
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	1acb      	subs	r3, r1, r3
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e32:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002e34:	fba3 2302 	umull	r2, r3, r3, r2
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e40:	441c      	add	r4, r3
 8002e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e54:	4642      	mov	r2, r8
 8002e56:	464b      	mov	r3, r9
 8002e58:	1891      	adds	r1, r2, r2
 8002e5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e5c:	415b      	adcs	r3, r3
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e64:	4641      	mov	r1, r8
 8002e66:	1851      	adds	r1, r2, r1
 8002e68:	6339      	str	r1, [r7, #48]	; 0x30
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	414b      	adcs	r3, r1
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e7c:	4659      	mov	r1, fp
 8002e7e:	00cb      	lsls	r3, r1, #3
 8002e80:	4651      	mov	r1, sl
 8002e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e86:	4651      	mov	r1, sl
 8002e88:	00ca      	lsls	r2, r1, #3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4642      	mov	r2, r8
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e98:	464b      	mov	r3, r9
 8002e9a:	460a      	mov	r2, r1
 8002e9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb8:	460b      	mov	r3, r1
 8002eba:	18db      	adds	r3, r3, r3
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	eb42 0303 	adc.w	r3, r2, r3
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ece:	f7fd f9d7 	bl	8000280 <__aeabi_uldivmod>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	2164      	movs	r1, #100	; 0x64
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	3332      	adds	r3, #50	; 0x32
 8002eea:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002eec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	f003 0207 	and.w	r2, r3, #7
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4422      	add	r2, r4
 8002efe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f00:	e105      	b.n	800310e <UART_SetConfig+0x4d6>
 8002f02:	bf00      	nop
 8002f04:	40011000 	.word	0x40011000
 8002f08:	40011400 	.word	0x40011400
 8002f0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f22:	4642      	mov	r2, r8
 8002f24:	464b      	mov	r3, r9
 8002f26:	1891      	adds	r1, r2, r2
 8002f28:	6239      	str	r1, [r7, #32]
 8002f2a:	415b      	adcs	r3, r3
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f32:	4641      	mov	r1, r8
 8002f34:	1854      	adds	r4, r2, r1
 8002f36:	4649      	mov	r1, r9
 8002f38:	eb43 0501 	adc.w	r5, r3, r1
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	00eb      	lsls	r3, r5, #3
 8002f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f4a:	00e2      	lsls	r2, r4, #3
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	4643      	mov	r3, r8
 8002f52:	18e3      	adds	r3, r4, r3
 8002f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f58:	464b      	mov	r3, r9
 8002f5a:	eb45 0303 	adc.w	r3, r5, r3
 8002f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f7e:	4629      	mov	r1, r5
 8002f80:	008b      	lsls	r3, r1, #2
 8002f82:	4621      	mov	r1, r4
 8002f84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f88:	4621      	mov	r1, r4
 8002f8a:	008a      	lsls	r2, r1, #2
 8002f8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f90:	f7fd f976 	bl	8000280 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4b60      	ldr	r3, [pc, #384]	; (800311c <UART_SetConfig+0x4e4>)
 8002f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	011c      	lsls	r4, r3, #4
 8002fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	1891      	adds	r1, r2, r2
 8002fba:	61b9      	str	r1, [r7, #24]
 8002fbc:	415b      	adcs	r3, r3
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	1851      	adds	r1, r2, r1
 8002fc8:	6139      	str	r1, [r7, #16]
 8002fca:	4649      	mov	r1, r9
 8002fcc:	414b      	adcs	r3, r1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fdc:	4659      	mov	r1, fp
 8002fde:	00cb      	lsls	r3, r1, #3
 8002fe0:	4651      	mov	r1, sl
 8002fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe6:	4651      	mov	r1, sl
 8002fe8:	00ca      	lsls	r2, r1, #3
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	189b      	adds	r3, r3, r2
 8002ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff8:	464b      	mov	r3, r9
 8002ffa:	460a      	mov	r2, r1
 8002ffc:	eb42 0303 	adc.w	r3, r2, r3
 8003000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	67bb      	str	r3, [r7, #120]	; 0x78
 800300e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800301c:	4649      	mov	r1, r9
 800301e:	008b      	lsls	r3, r1, #2
 8003020:	4641      	mov	r1, r8
 8003022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003026:	4641      	mov	r1, r8
 8003028:	008a      	lsls	r2, r1, #2
 800302a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800302e:	f7fd f927 	bl	8000280 <__aeabi_uldivmod>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <UART_SetConfig+0x4e4>)
 8003038:	fba3 1302 	umull	r1, r3, r3, r2
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	2164      	movs	r1, #100	; 0x64
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	3332      	adds	r3, #50	; 0x32
 800304a:	4a34      	ldr	r2, [pc, #208]	; (800311c <UART_SetConfig+0x4e4>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003056:	441c      	add	r4, r3
 8003058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305c:	2200      	movs	r2, #0
 800305e:	673b      	str	r3, [r7, #112]	; 0x70
 8003060:	677a      	str	r2, [r7, #116]	; 0x74
 8003062:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003066:	4642      	mov	r2, r8
 8003068:	464b      	mov	r3, r9
 800306a:	1891      	adds	r1, r2, r2
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	415b      	adcs	r3, r3
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003076:	4641      	mov	r1, r8
 8003078:	1851      	adds	r1, r2, r1
 800307a:	6039      	str	r1, [r7, #0]
 800307c:	4649      	mov	r1, r9
 800307e:	414b      	adcs	r3, r1
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800308e:	4659      	mov	r1, fp
 8003090:	00cb      	lsls	r3, r1, #3
 8003092:	4651      	mov	r1, sl
 8003094:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003098:	4651      	mov	r1, sl
 800309a:	00ca      	lsls	r2, r1, #3
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	4603      	mov	r3, r0
 80030a2:	4642      	mov	r2, r8
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80030a8:	464b      	mov	r3, r9
 80030aa:	460a      	mov	r2, r1
 80030ac:	eb42 0303 	adc.w	r3, r2, r3
 80030b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	663b      	str	r3, [r7, #96]	; 0x60
 80030bc:	667a      	str	r2, [r7, #100]	; 0x64
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030ca:	4649      	mov	r1, r9
 80030cc:	008b      	lsls	r3, r1, #2
 80030ce:	4641      	mov	r1, r8
 80030d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d4:	4641      	mov	r1, r8
 80030d6:	008a      	lsls	r2, r1, #2
 80030d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030dc:	f7fd f8d0 	bl	8000280 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <UART_SetConfig+0x4e4>)
 80030e6:	fba3 1302 	umull	r1, r3, r3, r2
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2164      	movs	r1, #100	; 0x64
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	3332      	adds	r3, #50	; 0x32
 80030f8:	4a08      	ldr	r2, [pc, #32]	; (800311c <UART_SetConfig+0x4e4>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4422      	add	r2, r4
 800310c:	609a      	str	r2, [r3, #8]
}
 800310e:	bf00      	nop
 8003110:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003114:	46bd      	mov	sp, r7
 8003116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311a:	bf00      	nop
 800311c:	51eb851f 	.word	0x51eb851f

08003120 <__errno>:
 8003120:	4b01      	ldr	r3, [pc, #4]	; (8003128 <__errno+0x8>)
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000010 	.word	0x20000010

0800312c <__libc_init_array>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	4d0d      	ldr	r5, [pc, #52]	; (8003164 <__libc_init_array+0x38>)
 8003130:	4c0d      	ldr	r4, [pc, #52]	; (8003168 <__libc_init_array+0x3c>)
 8003132:	1b64      	subs	r4, r4, r5
 8003134:	10a4      	asrs	r4, r4, #2
 8003136:	2600      	movs	r6, #0
 8003138:	42a6      	cmp	r6, r4
 800313a:	d109      	bne.n	8003150 <__libc_init_array+0x24>
 800313c:	4d0b      	ldr	r5, [pc, #44]	; (800316c <__libc_init_array+0x40>)
 800313e:	4c0c      	ldr	r4, [pc, #48]	; (8003170 <__libc_init_array+0x44>)
 8003140:	f000 fc8e 	bl	8003a60 <_init>
 8003144:	1b64      	subs	r4, r4, r5
 8003146:	10a4      	asrs	r4, r4, #2
 8003148:	2600      	movs	r6, #0
 800314a:	42a6      	cmp	r6, r4
 800314c:	d105      	bne.n	800315a <__libc_init_array+0x2e>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	f855 3b04 	ldr.w	r3, [r5], #4
 8003154:	4798      	blx	r3
 8003156:	3601      	adds	r6, #1
 8003158:	e7ee      	b.n	8003138 <__libc_init_array+0xc>
 800315a:	f855 3b04 	ldr.w	r3, [r5], #4
 800315e:	4798      	blx	r3
 8003160:	3601      	adds	r6, #1
 8003162:	e7f2      	b.n	800314a <__libc_init_array+0x1e>
 8003164:	08003af4 	.word	0x08003af4
 8003168:	08003af4 	.word	0x08003af4
 800316c:	08003af4 	.word	0x08003af4
 8003170:	08003af8 	.word	0x08003af8

08003174 <memset>:
 8003174:	4402      	add	r2, r0
 8003176:	4603      	mov	r3, r0
 8003178:	4293      	cmp	r3, r2
 800317a:	d100      	bne.n	800317e <memset+0xa>
 800317c:	4770      	bx	lr
 800317e:	f803 1b01 	strb.w	r1, [r3], #1
 8003182:	e7f9      	b.n	8003178 <memset+0x4>

08003184 <siprintf>:
 8003184:	b40e      	push	{r1, r2, r3}
 8003186:	b500      	push	{lr}
 8003188:	b09c      	sub	sp, #112	; 0x70
 800318a:	ab1d      	add	r3, sp, #116	; 0x74
 800318c:	9002      	str	r0, [sp, #8]
 800318e:	9006      	str	r0, [sp, #24]
 8003190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003194:	4809      	ldr	r0, [pc, #36]	; (80031bc <siprintf+0x38>)
 8003196:	9107      	str	r1, [sp, #28]
 8003198:	9104      	str	r1, [sp, #16]
 800319a:	4909      	ldr	r1, [pc, #36]	; (80031c0 <siprintf+0x3c>)
 800319c:	f853 2b04 	ldr.w	r2, [r3], #4
 80031a0:	9105      	str	r1, [sp, #20]
 80031a2:	6800      	ldr	r0, [r0, #0]
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	a902      	add	r1, sp, #8
 80031a8:	f000 f868 	bl	800327c <_svfiprintf_r>
 80031ac:	9b02      	ldr	r3, [sp, #8]
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	b01c      	add	sp, #112	; 0x70
 80031b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031b8:	b003      	add	sp, #12
 80031ba:	4770      	bx	lr
 80031bc:	20000010 	.word	0x20000010
 80031c0:	ffff0208 	.word	0xffff0208

080031c4 <__ssputs_r>:
 80031c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	688e      	ldr	r6, [r1, #8]
 80031ca:	429e      	cmp	r6, r3
 80031cc:	4682      	mov	sl, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	4690      	mov	r8, r2
 80031d2:	461f      	mov	r7, r3
 80031d4:	d838      	bhi.n	8003248 <__ssputs_r+0x84>
 80031d6:	898a      	ldrh	r2, [r1, #12]
 80031d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031dc:	d032      	beq.n	8003244 <__ssputs_r+0x80>
 80031de:	6825      	ldr	r5, [r4, #0]
 80031e0:	6909      	ldr	r1, [r1, #16]
 80031e2:	eba5 0901 	sub.w	r9, r5, r1
 80031e6:	6965      	ldr	r5, [r4, #20]
 80031e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031f0:	3301      	adds	r3, #1
 80031f2:	444b      	add	r3, r9
 80031f4:	106d      	asrs	r5, r5, #1
 80031f6:	429d      	cmp	r5, r3
 80031f8:	bf38      	it	cc
 80031fa:	461d      	movcc	r5, r3
 80031fc:	0553      	lsls	r3, r2, #21
 80031fe:	d531      	bpl.n	8003264 <__ssputs_r+0xa0>
 8003200:	4629      	mov	r1, r5
 8003202:	f000 fb63 	bl	80038cc <_malloc_r>
 8003206:	4606      	mov	r6, r0
 8003208:	b950      	cbnz	r0, 8003220 <__ssputs_r+0x5c>
 800320a:	230c      	movs	r3, #12
 800320c:	f8ca 3000 	str.w	r3, [sl]
 8003210:	89a3      	ldrh	r3, [r4, #12]
 8003212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003216:	81a3      	strh	r3, [r4, #12]
 8003218:	f04f 30ff 	mov.w	r0, #4294967295
 800321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003220:	6921      	ldr	r1, [r4, #16]
 8003222:	464a      	mov	r2, r9
 8003224:	f000 fabe 	bl	80037a4 <memcpy>
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003232:	81a3      	strh	r3, [r4, #12]
 8003234:	6126      	str	r6, [r4, #16]
 8003236:	6165      	str	r5, [r4, #20]
 8003238:	444e      	add	r6, r9
 800323a:	eba5 0509 	sub.w	r5, r5, r9
 800323e:	6026      	str	r6, [r4, #0]
 8003240:	60a5      	str	r5, [r4, #8]
 8003242:	463e      	mov	r6, r7
 8003244:	42be      	cmp	r6, r7
 8003246:	d900      	bls.n	800324a <__ssputs_r+0x86>
 8003248:	463e      	mov	r6, r7
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	4632      	mov	r2, r6
 800324e:	4641      	mov	r1, r8
 8003250:	f000 fab6 	bl	80037c0 <memmove>
 8003254:	68a3      	ldr	r3, [r4, #8]
 8003256:	1b9b      	subs	r3, r3, r6
 8003258:	60a3      	str	r3, [r4, #8]
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	4433      	add	r3, r6
 800325e:	6023      	str	r3, [r4, #0]
 8003260:	2000      	movs	r0, #0
 8003262:	e7db      	b.n	800321c <__ssputs_r+0x58>
 8003264:	462a      	mov	r2, r5
 8003266:	f000 fba5 	bl	80039b4 <_realloc_r>
 800326a:	4606      	mov	r6, r0
 800326c:	2800      	cmp	r0, #0
 800326e:	d1e1      	bne.n	8003234 <__ssputs_r+0x70>
 8003270:	6921      	ldr	r1, [r4, #16]
 8003272:	4650      	mov	r0, sl
 8003274:	f000 fabe 	bl	80037f4 <_free_r>
 8003278:	e7c7      	b.n	800320a <__ssputs_r+0x46>
	...

0800327c <_svfiprintf_r>:
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003280:	4698      	mov	r8, r3
 8003282:	898b      	ldrh	r3, [r1, #12]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	b09d      	sub	sp, #116	; 0x74
 8003288:	4607      	mov	r7, r0
 800328a:	460d      	mov	r5, r1
 800328c:	4614      	mov	r4, r2
 800328e:	d50e      	bpl.n	80032ae <_svfiprintf_r+0x32>
 8003290:	690b      	ldr	r3, [r1, #16]
 8003292:	b963      	cbnz	r3, 80032ae <_svfiprintf_r+0x32>
 8003294:	2140      	movs	r1, #64	; 0x40
 8003296:	f000 fb19 	bl	80038cc <_malloc_r>
 800329a:	6028      	str	r0, [r5, #0]
 800329c:	6128      	str	r0, [r5, #16]
 800329e:	b920      	cbnz	r0, 80032aa <_svfiprintf_r+0x2e>
 80032a0:	230c      	movs	r3, #12
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	e0d1      	b.n	800344e <_svfiprintf_r+0x1d2>
 80032aa:	2340      	movs	r3, #64	; 0x40
 80032ac:	616b      	str	r3, [r5, #20]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9309      	str	r3, [sp, #36]	; 0x24
 80032b2:	2320      	movs	r3, #32
 80032b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80032bc:	2330      	movs	r3, #48	; 0x30
 80032be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003468 <_svfiprintf_r+0x1ec>
 80032c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032c6:	f04f 0901 	mov.w	r9, #1
 80032ca:	4623      	mov	r3, r4
 80032cc:	469a      	mov	sl, r3
 80032ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032d2:	b10a      	cbz	r2, 80032d8 <_svfiprintf_r+0x5c>
 80032d4:	2a25      	cmp	r2, #37	; 0x25
 80032d6:	d1f9      	bne.n	80032cc <_svfiprintf_r+0x50>
 80032d8:	ebba 0b04 	subs.w	fp, sl, r4
 80032dc:	d00b      	beq.n	80032f6 <_svfiprintf_r+0x7a>
 80032de:	465b      	mov	r3, fp
 80032e0:	4622      	mov	r2, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	4638      	mov	r0, r7
 80032e6:	f7ff ff6d 	bl	80031c4 <__ssputs_r>
 80032ea:	3001      	adds	r0, #1
 80032ec:	f000 80aa 	beq.w	8003444 <_svfiprintf_r+0x1c8>
 80032f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032f2:	445a      	add	r2, fp
 80032f4:	9209      	str	r2, [sp, #36]	; 0x24
 80032f6:	f89a 3000 	ldrb.w	r3, [sl]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80a2 	beq.w	8003444 <_svfiprintf_r+0x1c8>
 8003300:	2300      	movs	r3, #0
 8003302:	f04f 32ff 	mov.w	r2, #4294967295
 8003306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800330a:	f10a 0a01 	add.w	sl, sl, #1
 800330e:	9304      	str	r3, [sp, #16]
 8003310:	9307      	str	r3, [sp, #28]
 8003312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003316:	931a      	str	r3, [sp, #104]	; 0x68
 8003318:	4654      	mov	r4, sl
 800331a:	2205      	movs	r2, #5
 800331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003320:	4851      	ldr	r0, [pc, #324]	; (8003468 <_svfiprintf_r+0x1ec>)
 8003322:	f7fc ff5d 	bl	80001e0 <memchr>
 8003326:	9a04      	ldr	r2, [sp, #16]
 8003328:	b9d8      	cbnz	r0, 8003362 <_svfiprintf_r+0xe6>
 800332a:	06d0      	lsls	r0, r2, #27
 800332c:	bf44      	itt	mi
 800332e:	2320      	movmi	r3, #32
 8003330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003334:	0711      	lsls	r1, r2, #28
 8003336:	bf44      	itt	mi
 8003338:	232b      	movmi	r3, #43	; 0x2b
 800333a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800333e:	f89a 3000 	ldrb.w	r3, [sl]
 8003342:	2b2a      	cmp	r3, #42	; 0x2a
 8003344:	d015      	beq.n	8003372 <_svfiprintf_r+0xf6>
 8003346:	9a07      	ldr	r2, [sp, #28]
 8003348:	4654      	mov	r4, sl
 800334a:	2000      	movs	r0, #0
 800334c:	f04f 0c0a 	mov.w	ip, #10
 8003350:	4621      	mov	r1, r4
 8003352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003356:	3b30      	subs	r3, #48	; 0x30
 8003358:	2b09      	cmp	r3, #9
 800335a:	d94e      	bls.n	80033fa <_svfiprintf_r+0x17e>
 800335c:	b1b0      	cbz	r0, 800338c <_svfiprintf_r+0x110>
 800335e:	9207      	str	r2, [sp, #28]
 8003360:	e014      	b.n	800338c <_svfiprintf_r+0x110>
 8003362:	eba0 0308 	sub.w	r3, r0, r8
 8003366:	fa09 f303 	lsl.w	r3, r9, r3
 800336a:	4313      	orrs	r3, r2
 800336c:	9304      	str	r3, [sp, #16]
 800336e:	46a2      	mov	sl, r4
 8003370:	e7d2      	b.n	8003318 <_svfiprintf_r+0x9c>
 8003372:	9b03      	ldr	r3, [sp, #12]
 8003374:	1d19      	adds	r1, r3, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	9103      	str	r1, [sp, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	bfbb      	ittet	lt
 800337e:	425b      	neglt	r3, r3
 8003380:	f042 0202 	orrlt.w	r2, r2, #2
 8003384:	9307      	strge	r3, [sp, #28]
 8003386:	9307      	strlt	r3, [sp, #28]
 8003388:	bfb8      	it	lt
 800338a:	9204      	strlt	r2, [sp, #16]
 800338c:	7823      	ldrb	r3, [r4, #0]
 800338e:	2b2e      	cmp	r3, #46	; 0x2e
 8003390:	d10c      	bne.n	80033ac <_svfiprintf_r+0x130>
 8003392:	7863      	ldrb	r3, [r4, #1]
 8003394:	2b2a      	cmp	r3, #42	; 0x2a
 8003396:	d135      	bne.n	8003404 <_svfiprintf_r+0x188>
 8003398:	9b03      	ldr	r3, [sp, #12]
 800339a:	1d1a      	adds	r2, r3, #4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	9203      	str	r2, [sp, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bfb8      	it	lt
 80033a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80033a8:	3402      	adds	r4, #2
 80033aa:	9305      	str	r3, [sp, #20]
 80033ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003478 <_svfiprintf_r+0x1fc>
 80033b0:	7821      	ldrb	r1, [r4, #0]
 80033b2:	2203      	movs	r2, #3
 80033b4:	4650      	mov	r0, sl
 80033b6:	f7fc ff13 	bl	80001e0 <memchr>
 80033ba:	b140      	cbz	r0, 80033ce <_svfiprintf_r+0x152>
 80033bc:	2340      	movs	r3, #64	; 0x40
 80033be:	eba0 000a 	sub.w	r0, r0, sl
 80033c2:	fa03 f000 	lsl.w	r0, r3, r0
 80033c6:	9b04      	ldr	r3, [sp, #16]
 80033c8:	4303      	orrs	r3, r0
 80033ca:	3401      	adds	r4, #1
 80033cc:	9304      	str	r3, [sp, #16]
 80033ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d2:	4826      	ldr	r0, [pc, #152]	; (800346c <_svfiprintf_r+0x1f0>)
 80033d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033d8:	2206      	movs	r2, #6
 80033da:	f7fc ff01 	bl	80001e0 <memchr>
 80033de:	2800      	cmp	r0, #0
 80033e0:	d038      	beq.n	8003454 <_svfiprintf_r+0x1d8>
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <_svfiprintf_r+0x1f4>)
 80033e4:	bb1b      	cbnz	r3, 800342e <_svfiprintf_r+0x1b2>
 80033e6:	9b03      	ldr	r3, [sp, #12]
 80033e8:	3307      	adds	r3, #7
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	3308      	adds	r3, #8
 80033f0:	9303      	str	r3, [sp, #12]
 80033f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f4:	4433      	add	r3, r6
 80033f6:	9309      	str	r3, [sp, #36]	; 0x24
 80033f8:	e767      	b.n	80032ca <_svfiprintf_r+0x4e>
 80033fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80033fe:	460c      	mov	r4, r1
 8003400:	2001      	movs	r0, #1
 8003402:	e7a5      	b.n	8003350 <_svfiprintf_r+0xd4>
 8003404:	2300      	movs	r3, #0
 8003406:	3401      	adds	r4, #1
 8003408:	9305      	str	r3, [sp, #20]
 800340a:	4619      	mov	r1, r3
 800340c:	f04f 0c0a 	mov.w	ip, #10
 8003410:	4620      	mov	r0, r4
 8003412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003416:	3a30      	subs	r2, #48	; 0x30
 8003418:	2a09      	cmp	r2, #9
 800341a:	d903      	bls.n	8003424 <_svfiprintf_r+0x1a8>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0c5      	beq.n	80033ac <_svfiprintf_r+0x130>
 8003420:	9105      	str	r1, [sp, #20]
 8003422:	e7c3      	b.n	80033ac <_svfiprintf_r+0x130>
 8003424:	fb0c 2101 	mla	r1, ip, r1, r2
 8003428:	4604      	mov	r4, r0
 800342a:	2301      	movs	r3, #1
 800342c:	e7f0      	b.n	8003410 <_svfiprintf_r+0x194>
 800342e:	ab03      	add	r3, sp, #12
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	462a      	mov	r2, r5
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <_svfiprintf_r+0x1f8>)
 8003436:	a904      	add	r1, sp, #16
 8003438:	4638      	mov	r0, r7
 800343a:	f3af 8000 	nop.w
 800343e:	1c42      	adds	r2, r0, #1
 8003440:	4606      	mov	r6, r0
 8003442:	d1d6      	bne.n	80033f2 <_svfiprintf_r+0x176>
 8003444:	89ab      	ldrh	r3, [r5, #12]
 8003446:	065b      	lsls	r3, r3, #25
 8003448:	f53f af2c 	bmi.w	80032a4 <_svfiprintf_r+0x28>
 800344c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800344e:	b01d      	add	sp, #116	; 0x74
 8003450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003454:	ab03      	add	r3, sp, #12
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	462a      	mov	r2, r5
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <_svfiprintf_r+0x1f8>)
 800345c:	a904      	add	r1, sp, #16
 800345e:	4638      	mov	r0, r7
 8003460:	f000 f87a 	bl	8003558 <_printf_i>
 8003464:	e7eb      	b.n	800343e <_svfiprintf_r+0x1c2>
 8003466:	bf00      	nop
 8003468:	08003ab8 	.word	0x08003ab8
 800346c:	08003ac2 	.word	0x08003ac2
 8003470:	00000000 	.word	0x00000000
 8003474:	080031c5 	.word	0x080031c5
 8003478:	08003abe 	.word	0x08003abe

0800347c <_printf_common>:
 800347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003480:	4616      	mov	r6, r2
 8003482:	4699      	mov	r9, r3
 8003484:	688a      	ldr	r2, [r1, #8]
 8003486:	690b      	ldr	r3, [r1, #16]
 8003488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800348c:	4293      	cmp	r3, r2
 800348e:	bfb8      	it	lt
 8003490:	4613      	movlt	r3, r2
 8003492:	6033      	str	r3, [r6, #0]
 8003494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003498:	4607      	mov	r7, r0
 800349a:	460c      	mov	r4, r1
 800349c:	b10a      	cbz	r2, 80034a2 <_printf_common+0x26>
 800349e:	3301      	adds	r3, #1
 80034a0:	6033      	str	r3, [r6, #0]
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	0699      	lsls	r1, r3, #26
 80034a6:	bf42      	ittt	mi
 80034a8:	6833      	ldrmi	r3, [r6, #0]
 80034aa:	3302      	addmi	r3, #2
 80034ac:	6033      	strmi	r3, [r6, #0]
 80034ae:	6825      	ldr	r5, [r4, #0]
 80034b0:	f015 0506 	ands.w	r5, r5, #6
 80034b4:	d106      	bne.n	80034c4 <_printf_common+0x48>
 80034b6:	f104 0a19 	add.w	sl, r4, #25
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	6832      	ldr	r2, [r6, #0]
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	42ab      	cmp	r3, r5
 80034c2:	dc26      	bgt.n	8003512 <_printf_common+0x96>
 80034c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034c8:	1e13      	subs	r3, r2, #0
 80034ca:	6822      	ldr	r2, [r4, #0]
 80034cc:	bf18      	it	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	0692      	lsls	r2, r2, #26
 80034d2:	d42b      	bmi.n	800352c <_printf_common+0xb0>
 80034d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034d8:	4649      	mov	r1, r9
 80034da:	4638      	mov	r0, r7
 80034dc:	47c0      	blx	r8
 80034de:	3001      	adds	r0, #1
 80034e0:	d01e      	beq.n	8003520 <_printf_common+0xa4>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	68e5      	ldr	r5, [r4, #12]
 80034e6:	6832      	ldr	r2, [r6, #0]
 80034e8:	f003 0306 	and.w	r3, r3, #6
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	bf08      	it	eq
 80034f0:	1aad      	subeq	r5, r5, r2
 80034f2:	68a3      	ldr	r3, [r4, #8]
 80034f4:	6922      	ldr	r2, [r4, #16]
 80034f6:	bf0c      	ite	eq
 80034f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034fc:	2500      	movne	r5, #0
 80034fe:	4293      	cmp	r3, r2
 8003500:	bfc4      	itt	gt
 8003502:	1a9b      	subgt	r3, r3, r2
 8003504:	18ed      	addgt	r5, r5, r3
 8003506:	2600      	movs	r6, #0
 8003508:	341a      	adds	r4, #26
 800350a:	42b5      	cmp	r5, r6
 800350c:	d11a      	bne.n	8003544 <_printf_common+0xc8>
 800350e:	2000      	movs	r0, #0
 8003510:	e008      	b.n	8003524 <_printf_common+0xa8>
 8003512:	2301      	movs	r3, #1
 8003514:	4652      	mov	r2, sl
 8003516:	4649      	mov	r1, r9
 8003518:	4638      	mov	r0, r7
 800351a:	47c0      	blx	r8
 800351c:	3001      	adds	r0, #1
 800351e:	d103      	bne.n	8003528 <_printf_common+0xac>
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003528:	3501      	adds	r5, #1
 800352a:	e7c6      	b.n	80034ba <_printf_common+0x3e>
 800352c:	18e1      	adds	r1, r4, r3
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	2030      	movs	r0, #48	; 0x30
 8003532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003536:	4422      	add	r2, r4
 8003538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800353c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003540:	3302      	adds	r3, #2
 8003542:	e7c7      	b.n	80034d4 <_printf_common+0x58>
 8003544:	2301      	movs	r3, #1
 8003546:	4622      	mov	r2, r4
 8003548:	4649      	mov	r1, r9
 800354a:	4638      	mov	r0, r7
 800354c:	47c0      	blx	r8
 800354e:	3001      	adds	r0, #1
 8003550:	d0e6      	beq.n	8003520 <_printf_common+0xa4>
 8003552:	3601      	adds	r6, #1
 8003554:	e7d9      	b.n	800350a <_printf_common+0x8e>
	...

08003558 <_printf_i>:
 8003558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	7e0f      	ldrb	r7, [r1, #24]
 800355e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003560:	2f78      	cmp	r7, #120	; 0x78
 8003562:	4691      	mov	r9, r2
 8003564:	4680      	mov	r8, r0
 8003566:	460c      	mov	r4, r1
 8003568:	469a      	mov	sl, r3
 800356a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800356e:	d807      	bhi.n	8003580 <_printf_i+0x28>
 8003570:	2f62      	cmp	r7, #98	; 0x62
 8003572:	d80a      	bhi.n	800358a <_printf_i+0x32>
 8003574:	2f00      	cmp	r7, #0
 8003576:	f000 80d8 	beq.w	800372a <_printf_i+0x1d2>
 800357a:	2f58      	cmp	r7, #88	; 0x58
 800357c:	f000 80a3 	beq.w	80036c6 <_printf_i+0x16e>
 8003580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003588:	e03a      	b.n	8003600 <_printf_i+0xa8>
 800358a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800358e:	2b15      	cmp	r3, #21
 8003590:	d8f6      	bhi.n	8003580 <_printf_i+0x28>
 8003592:	a101      	add	r1, pc, #4	; (adr r1, 8003598 <_printf_i+0x40>)
 8003594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003598:	080035f1 	.word	0x080035f1
 800359c:	08003605 	.word	0x08003605
 80035a0:	08003581 	.word	0x08003581
 80035a4:	08003581 	.word	0x08003581
 80035a8:	08003581 	.word	0x08003581
 80035ac:	08003581 	.word	0x08003581
 80035b0:	08003605 	.word	0x08003605
 80035b4:	08003581 	.word	0x08003581
 80035b8:	08003581 	.word	0x08003581
 80035bc:	08003581 	.word	0x08003581
 80035c0:	08003581 	.word	0x08003581
 80035c4:	08003711 	.word	0x08003711
 80035c8:	08003635 	.word	0x08003635
 80035cc:	080036f3 	.word	0x080036f3
 80035d0:	08003581 	.word	0x08003581
 80035d4:	08003581 	.word	0x08003581
 80035d8:	08003733 	.word	0x08003733
 80035dc:	08003581 	.word	0x08003581
 80035e0:	08003635 	.word	0x08003635
 80035e4:	08003581 	.word	0x08003581
 80035e8:	08003581 	.word	0x08003581
 80035ec:	080036fb 	.word	0x080036fb
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	602a      	str	r2, [r5, #0]
 80035f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003600:	2301      	movs	r3, #1
 8003602:	e0a3      	b.n	800374c <_printf_i+0x1f4>
 8003604:	6820      	ldr	r0, [r4, #0]
 8003606:	6829      	ldr	r1, [r5, #0]
 8003608:	0606      	lsls	r6, r0, #24
 800360a:	f101 0304 	add.w	r3, r1, #4
 800360e:	d50a      	bpl.n	8003626 <_printf_i+0xce>
 8003610:	680e      	ldr	r6, [r1, #0]
 8003612:	602b      	str	r3, [r5, #0]
 8003614:	2e00      	cmp	r6, #0
 8003616:	da03      	bge.n	8003620 <_printf_i+0xc8>
 8003618:	232d      	movs	r3, #45	; 0x2d
 800361a:	4276      	negs	r6, r6
 800361c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003620:	485e      	ldr	r0, [pc, #376]	; (800379c <_printf_i+0x244>)
 8003622:	230a      	movs	r3, #10
 8003624:	e019      	b.n	800365a <_printf_i+0x102>
 8003626:	680e      	ldr	r6, [r1, #0]
 8003628:	602b      	str	r3, [r5, #0]
 800362a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800362e:	bf18      	it	ne
 8003630:	b236      	sxthne	r6, r6
 8003632:	e7ef      	b.n	8003614 <_printf_i+0xbc>
 8003634:	682b      	ldr	r3, [r5, #0]
 8003636:	6820      	ldr	r0, [r4, #0]
 8003638:	1d19      	adds	r1, r3, #4
 800363a:	6029      	str	r1, [r5, #0]
 800363c:	0601      	lsls	r1, r0, #24
 800363e:	d501      	bpl.n	8003644 <_printf_i+0xec>
 8003640:	681e      	ldr	r6, [r3, #0]
 8003642:	e002      	b.n	800364a <_printf_i+0xf2>
 8003644:	0646      	lsls	r6, r0, #25
 8003646:	d5fb      	bpl.n	8003640 <_printf_i+0xe8>
 8003648:	881e      	ldrh	r6, [r3, #0]
 800364a:	4854      	ldr	r0, [pc, #336]	; (800379c <_printf_i+0x244>)
 800364c:	2f6f      	cmp	r7, #111	; 0x6f
 800364e:	bf0c      	ite	eq
 8003650:	2308      	moveq	r3, #8
 8003652:	230a      	movne	r3, #10
 8003654:	2100      	movs	r1, #0
 8003656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800365a:	6865      	ldr	r5, [r4, #4]
 800365c:	60a5      	str	r5, [r4, #8]
 800365e:	2d00      	cmp	r5, #0
 8003660:	bfa2      	ittt	ge
 8003662:	6821      	ldrge	r1, [r4, #0]
 8003664:	f021 0104 	bicge.w	r1, r1, #4
 8003668:	6021      	strge	r1, [r4, #0]
 800366a:	b90e      	cbnz	r6, 8003670 <_printf_i+0x118>
 800366c:	2d00      	cmp	r5, #0
 800366e:	d04d      	beq.n	800370c <_printf_i+0x1b4>
 8003670:	4615      	mov	r5, r2
 8003672:	fbb6 f1f3 	udiv	r1, r6, r3
 8003676:	fb03 6711 	mls	r7, r3, r1, r6
 800367a:	5dc7      	ldrb	r7, [r0, r7]
 800367c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003680:	4637      	mov	r7, r6
 8003682:	42bb      	cmp	r3, r7
 8003684:	460e      	mov	r6, r1
 8003686:	d9f4      	bls.n	8003672 <_printf_i+0x11a>
 8003688:	2b08      	cmp	r3, #8
 800368a:	d10b      	bne.n	80036a4 <_printf_i+0x14c>
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	07de      	lsls	r6, r3, #31
 8003690:	d508      	bpl.n	80036a4 <_printf_i+0x14c>
 8003692:	6923      	ldr	r3, [r4, #16]
 8003694:	6861      	ldr	r1, [r4, #4]
 8003696:	4299      	cmp	r1, r3
 8003698:	bfde      	ittt	le
 800369a:	2330      	movle	r3, #48	; 0x30
 800369c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036a4:	1b52      	subs	r2, r2, r5
 80036a6:	6122      	str	r2, [r4, #16]
 80036a8:	f8cd a000 	str.w	sl, [sp]
 80036ac:	464b      	mov	r3, r9
 80036ae:	aa03      	add	r2, sp, #12
 80036b0:	4621      	mov	r1, r4
 80036b2:	4640      	mov	r0, r8
 80036b4:	f7ff fee2 	bl	800347c <_printf_common>
 80036b8:	3001      	adds	r0, #1
 80036ba:	d14c      	bne.n	8003756 <_printf_i+0x1fe>
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	b004      	add	sp, #16
 80036c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c6:	4835      	ldr	r0, [pc, #212]	; (800379c <_printf_i+0x244>)
 80036c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036cc:	6829      	ldr	r1, [r5, #0]
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80036d4:	6029      	str	r1, [r5, #0]
 80036d6:	061d      	lsls	r5, r3, #24
 80036d8:	d514      	bpl.n	8003704 <_printf_i+0x1ac>
 80036da:	07df      	lsls	r7, r3, #31
 80036dc:	bf44      	itt	mi
 80036de:	f043 0320 	orrmi.w	r3, r3, #32
 80036e2:	6023      	strmi	r3, [r4, #0]
 80036e4:	b91e      	cbnz	r6, 80036ee <_printf_i+0x196>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	f023 0320 	bic.w	r3, r3, #32
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	2310      	movs	r3, #16
 80036f0:	e7b0      	b.n	8003654 <_printf_i+0xfc>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	f043 0320 	orr.w	r3, r3, #32
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	2378      	movs	r3, #120	; 0x78
 80036fc:	4828      	ldr	r0, [pc, #160]	; (80037a0 <_printf_i+0x248>)
 80036fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003702:	e7e3      	b.n	80036cc <_printf_i+0x174>
 8003704:	0659      	lsls	r1, r3, #25
 8003706:	bf48      	it	mi
 8003708:	b2b6      	uxthmi	r6, r6
 800370a:	e7e6      	b.n	80036da <_printf_i+0x182>
 800370c:	4615      	mov	r5, r2
 800370e:	e7bb      	b.n	8003688 <_printf_i+0x130>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	6826      	ldr	r6, [r4, #0]
 8003714:	6961      	ldr	r1, [r4, #20]
 8003716:	1d18      	adds	r0, r3, #4
 8003718:	6028      	str	r0, [r5, #0]
 800371a:	0635      	lsls	r5, r6, #24
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	d501      	bpl.n	8003724 <_printf_i+0x1cc>
 8003720:	6019      	str	r1, [r3, #0]
 8003722:	e002      	b.n	800372a <_printf_i+0x1d2>
 8003724:	0670      	lsls	r0, r6, #25
 8003726:	d5fb      	bpl.n	8003720 <_printf_i+0x1c8>
 8003728:	8019      	strh	r1, [r3, #0]
 800372a:	2300      	movs	r3, #0
 800372c:	6123      	str	r3, [r4, #16]
 800372e:	4615      	mov	r5, r2
 8003730:	e7ba      	b.n	80036a8 <_printf_i+0x150>
 8003732:	682b      	ldr	r3, [r5, #0]
 8003734:	1d1a      	adds	r2, r3, #4
 8003736:	602a      	str	r2, [r5, #0]
 8003738:	681d      	ldr	r5, [r3, #0]
 800373a:	6862      	ldr	r2, [r4, #4]
 800373c:	2100      	movs	r1, #0
 800373e:	4628      	mov	r0, r5
 8003740:	f7fc fd4e 	bl	80001e0 <memchr>
 8003744:	b108      	cbz	r0, 800374a <_printf_i+0x1f2>
 8003746:	1b40      	subs	r0, r0, r5
 8003748:	6060      	str	r0, [r4, #4]
 800374a:	6863      	ldr	r3, [r4, #4]
 800374c:	6123      	str	r3, [r4, #16]
 800374e:	2300      	movs	r3, #0
 8003750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003754:	e7a8      	b.n	80036a8 <_printf_i+0x150>
 8003756:	6923      	ldr	r3, [r4, #16]
 8003758:	462a      	mov	r2, r5
 800375a:	4649      	mov	r1, r9
 800375c:	4640      	mov	r0, r8
 800375e:	47d0      	blx	sl
 8003760:	3001      	adds	r0, #1
 8003762:	d0ab      	beq.n	80036bc <_printf_i+0x164>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	079b      	lsls	r3, r3, #30
 8003768:	d413      	bmi.n	8003792 <_printf_i+0x23a>
 800376a:	68e0      	ldr	r0, [r4, #12]
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	4298      	cmp	r0, r3
 8003770:	bfb8      	it	lt
 8003772:	4618      	movlt	r0, r3
 8003774:	e7a4      	b.n	80036c0 <_printf_i+0x168>
 8003776:	2301      	movs	r3, #1
 8003778:	4632      	mov	r2, r6
 800377a:	4649      	mov	r1, r9
 800377c:	4640      	mov	r0, r8
 800377e:	47d0      	blx	sl
 8003780:	3001      	adds	r0, #1
 8003782:	d09b      	beq.n	80036bc <_printf_i+0x164>
 8003784:	3501      	adds	r5, #1
 8003786:	68e3      	ldr	r3, [r4, #12]
 8003788:	9903      	ldr	r1, [sp, #12]
 800378a:	1a5b      	subs	r3, r3, r1
 800378c:	42ab      	cmp	r3, r5
 800378e:	dcf2      	bgt.n	8003776 <_printf_i+0x21e>
 8003790:	e7eb      	b.n	800376a <_printf_i+0x212>
 8003792:	2500      	movs	r5, #0
 8003794:	f104 0619 	add.w	r6, r4, #25
 8003798:	e7f5      	b.n	8003786 <_printf_i+0x22e>
 800379a:	bf00      	nop
 800379c:	08003ac9 	.word	0x08003ac9
 80037a0:	08003ada 	.word	0x08003ada

080037a4 <memcpy>:
 80037a4:	440a      	add	r2, r1
 80037a6:	4291      	cmp	r1, r2
 80037a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80037ac:	d100      	bne.n	80037b0 <memcpy+0xc>
 80037ae:	4770      	bx	lr
 80037b0:	b510      	push	{r4, lr}
 80037b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ba:	4291      	cmp	r1, r2
 80037bc:	d1f9      	bne.n	80037b2 <memcpy+0xe>
 80037be:	bd10      	pop	{r4, pc}

080037c0 <memmove>:
 80037c0:	4288      	cmp	r0, r1
 80037c2:	b510      	push	{r4, lr}
 80037c4:	eb01 0402 	add.w	r4, r1, r2
 80037c8:	d902      	bls.n	80037d0 <memmove+0x10>
 80037ca:	4284      	cmp	r4, r0
 80037cc:	4623      	mov	r3, r4
 80037ce:	d807      	bhi.n	80037e0 <memmove+0x20>
 80037d0:	1e43      	subs	r3, r0, #1
 80037d2:	42a1      	cmp	r1, r4
 80037d4:	d008      	beq.n	80037e8 <memmove+0x28>
 80037d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037de:	e7f8      	b.n	80037d2 <memmove+0x12>
 80037e0:	4402      	add	r2, r0
 80037e2:	4601      	mov	r1, r0
 80037e4:	428a      	cmp	r2, r1
 80037e6:	d100      	bne.n	80037ea <memmove+0x2a>
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037f2:	e7f7      	b.n	80037e4 <memmove+0x24>

080037f4 <_free_r>:
 80037f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037f6:	2900      	cmp	r1, #0
 80037f8:	d044      	beq.n	8003884 <_free_r+0x90>
 80037fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037fe:	9001      	str	r0, [sp, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f1a1 0404 	sub.w	r4, r1, #4
 8003806:	bfb8      	it	lt
 8003808:	18e4      	addlt	r4, r4, r3
 800380a:	f000 f913 	bl	8003a34 <__malloc_lock>
 800380e:	4a1e      	ldr	r2, [pc, #120]	; (8003888 <_free_r+0x94>)
 8003810:	9801      	ldr	r0, [sp, #4]
 8003812:	6813      	ldr	r3, [r2, #0]
 8003814:	b933      	cbnz	r3, 8003824 <_free_r+0x30>
 8003816:	6063      	str	r3, [r4, #4]
 8003818:	6014      	str	r4, [r2, #0]
 800381a:	b003      	add	sp, #12
 800381c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003820:	f000 b90e 	b.w	8003a40 <__malloc_unlock>
 8003824:	42a3      	cmp	r3, r4
 8003826:	d908      	bls.n	800383a <_free_r+0x46>
 8003828:	6825      	ldr	r5, [r4, #0]
 800382a:	1961      	adds	r1, r4, r5
 800382c:	428b      	cmp	r3, r1
 800382e:	bf01      	itttt	eq
 8003830:	6819      	ldreq	r1, [r3, #0]
 8003832:	685b      	ldreq	r3, [r3, #4]
 8003834:	1949      	addeq	r1, r1, r5
 8003836:	6021      	streq	r1, [r4, #0]
 8003838:	e7ed      	b.n	8003816 <_free_r+0x22>
 800383a:	461a      	mov	r2, r3
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	b10b      	cbz	r3, 8003844 <_free_r+0x50>
 8003840:	42a3      	cmp	r3, r4
 8003842:	d9fa      	bls.n	800383a <_free_r+0x46>
 8003844:	6811      	ldr	r1, [r2, #0]
 8003846:	1855      	adds	r5, r2, r1
 8003848:	42a5      	cmp	r5, r4
 800384a:	d10b      	bne.n	8003864 <_free_r+0x70>
 800384c:	6824      	ldr	r4, [r4, #0]
 800384e:	4421      	add	r1, r4
 8003850:	1854      	adds	r4, r2, r1
 8003852:	42a3      	cmp	r3, r4
 8003854:	6011      	str	r1, [r2, #0]
 8003856:	d1e0      	bne.n	800381a <_free_r+0x26>
 8003858:	681c      	ldr	r4, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	6053      	str	r3, [r2, #4]
 800385e:	4421      	add	r1, r4
 8003860:	6011      	str	r1, [r2, #0]
 8003862:	e7da      	b.n	800381a <_free_r+0x26>
 8003864:	d902      	bls.n	800386c <_free_r+0x78>
 8003866:	230c      	movs	r3, #12
 8003868:	6003      	str	r3, [r0, #0]
 800386a:	e7d6      	b.n	800381a <_free_r+0x26>
 800386c:	6825      	ldr	r5, [r4, #0]
 800386e:	1961      	adds	r1, r4, r5
 8003870:	428b      	cmp	r3, r1
 8003872:	bf04      	itt	eq
 8003874:	6819      	ldreq	r1, [r3, #0]
 8003876:	685b      	ldreq	r3, [r3, #4]
 8003878:	6063      	str	r3, [r4, #4]
 800387a:	bf04      	itt	eq
 800387c:	1949      	addeq	r1, r1, r5
 800387e:	6021      	streq	r1, [r4, #0]
 8003880:	6054      	str	r4, [r2, #4]
 8003882:	e7ca      	b.n	800381a <_free_r+0x26>
 8003884:	b003      	add	sp, #12
 8003886:	bd30      	pop	{r4, r5, pc}
 8003888:	200001dc 	.word	0x200001dc

0800388c <sbrk_aligned>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	4e0e      	ldr	r6, [pc, #56]	; (80038c8 <sbrk_aligned+0x3c>)
 8003890:	460c      	mov	r4, r1
 8003892:	6831      	ldr	r1, [r6, #0]
 8003894:	4605      	mov	r5, r0
 8003896:	b911      	cbnz	r1, 800389e <sbrk_aligned+0x12>
 8003898:	f000 f8bc 	bl	8003a14 <_sbrk_r>
 800389c:	6030      	str	r0, [r6, #0]
 800389e:	4621      	mov	r1, r4
 80038a0:	4628      	mov	r0, r5
 80038a2:	f000 f8b7 	bl	8003a14 <_sbrk_r>
 80038a6:	1c43      	adds	r3, r0, #1
 80038a8:	d00a      	beq.n	80038c0 <sbrk_aligned+0x34>
 80038aa:	1cc4      	adds	r4, r0, #3
 80038ac:	f024 0403 	bic.w	r4, r4, #3
 80038b0:	42a0      	cmp	r0, r4
 80038b2:	d007      	beq.n	80038c4 <sbrk_aligned+0x38>
 80038b4:	1a21      	subs	r1, r4, r0
 80038b6:	4628      	mov	r0, r5
 80038b8:	f000 f8ac 	bl	8003a14 <_sbrk_r>
 80038bc:	3001      	adds	r0, #1
 80038be:	d101      	bne.n	80038c4 <sbrk_aligned+0x38>
 80038c0:	f04f 34ff 	mov.w	r4, #4294967295
 80038c4:	4620      	mov	r0, r4
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	200001e0 	.word	0x200001e0

080038cc <_malloc_r>:
 80038cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d0:	1ccd      	adds	r5, r1, #3
 80038d2:	f025 0503 	bic.w	r5, r5, #3
 80038d6:	3508      	adds	r5, #8
 80038d8:	2d0c      	cmp	r5, #12
 80038da:	bf38      	it	cc
 80038dc:	250c      	movcc	r5, #12
 80038de:	2d00      	cmp	r5, #0
 80038e0:	4607      	mov	r7, r0
 80038e2:	db01      	blt.n	80038e8 <_malloc_r+0x1c>
 80038e4:	42a9      	cmp	r1, r5
 80038e6:	d905      	bls.n	80038f4 <_malloc_r+0x28>
 80038e8:	230c      	movs	r3, #12
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	2600      	movs	r6, #0
 80038ee:	4630      	mov	r0, r6
 80038f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f4:	4e2e      	ldr	r6, [pc, #184]	; (80039b0 <_malloc_r+0xe4>)
 80038f6:	f000 f89d 	bl	8003a34 <__malloc_lock>
 80038fa:	6833      	ldr	r3, [r6, #0]
 80038fc:	461c      	mov	r4, r3
 80038fe:	bb34      	cbnz	r4, 800394e <_malloc_r+0x82>
 8003900:	4629      	mov	r1, r5
 8003902:	4638      	mov	r0, r7
 8003904:	f7ff ffc2 	bl	800388c <sbrk_aligned>
 8003908:	1c43      	adds	r3, r0, #1
 800390a:	4604      	mov	r4, r0
 800390c:	d14d      	bne.n	80039aa <_malloc_r+0xde>
 800390e:	6834      	ldr	r4, [r6, #0]
 8003910:	4626      	mov	r6, r4
 8003912:	2e00      	cmp	r6, #0
 8003914:	d140      	bne.n	8003998 <_malloc_r+0xcc>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	4631      	mov	r1, r6
 800391a:	4638      	mov	r0, r7
 800391c:	eb04 0803 	add.w	r8, r4, r3
 8003920:	f000 f878 	bl	8003a14 <_sbrk_r>
 8003924:	4580      	cmp	r8, r0
 8003926:	d13a      	bne.n	800399e <_malloc_r+0xd2>
 8003928:	6821      	ldr	r1, [r4, #0]
 800392a:	3503      	adds	r5, #3
 800392c:	1a6d      	subs	r5, r5, r1
 800392e:	f025 0503 	bic.w	r5, r5, #3
 8003932:	3508      	adds	r5, #8
 8003934:	2d0c      	cmp	r5, #12
 8003936:	bf38      	it	cc
 8003938:	250c      	movcc	r5, #12
 800393a:	4629      	mov	r1, r5
 800393c:	4638      	mov	r0, r7
 800393e:	f7ff ffa5 	bl	800388c <sbrk_aligned>
 8003942:	3001      	adds	r0, #1
 8003944:	d02b      	beq.n	800399e <_malloc_r+0xd2>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	442b      	add	r3, r5
 800394a:	6023      	str	r3, [r4, #0]
 800394c:	e00e      	b.n	800396c <_malloc_r+0xa0>
 800394e:	6822      	ldr	r2, [r4, #0]
 8003950:	1b52      	subs	r2, r2, r5
 8003952:	d41e      	bmi.n	8003992 <_malloc_r+0xc6>
 8003954:	2a0b      	cmp	r2, #11
 8003956:	d916      	bls.n	8003986 <_malloc_r+0xba>
 8003958:	1961      	adds	r1, r4, r5
 800395a:	42a3      	cmp	r3, r4
 800395c:	6025      	str	r5, [r4, #0]
 800395e:	bf18      	it	ne
 8003960:	6059      	strne	r1, [r3, #4]
 8003962:	6863      	ldr	r3, [r4, #4]
 8003964:	bf08      	it	eq
 8003966:	6031      	streq	r1, [r6, #0]
 8003968:	5162      	str	r2, [r4, r5]
 800396a:	604b      	str	r3, [r1, #4]
 800396c:	4638      	mov	r0, r7
 800396e:	f104 060b 	add.w	r6, r4, #11
 8003972:	f000 f865 	bl	8003a40 <__malloc_unlock>
 8003976:	f026 0607 	bic.w	r6, r6, #7
 800397a:	1d23      	adds	r3, r4, #4
 800397c:	1af2      	subs	r2, r6, r3
 800397e:	d0b6      	beq.n	80038ee <_malloc_r+0x22>
 8003980:	1b9b      	subs	r3, r3, r6
 8003982:	50a3      	str	r3, [r4, r2]
 8003984:	e7b3      	b.n	80038ee <_malloc_r+0x22>
 8003986:	6862      	ldr	r2, [r4, #4]
 8003988:	42a3      	cmp	r3, r4
 800398a:	bf0c      	ite	eq
 800398c:	6032      	streq	r2, [r6, #0]
 800398e:	605a      	strne	r2, [r3, #4]
 8003990:	e7ec      	b.n	800396c <_malloc_r+0xa0>
 8003992:	4623      	mov	r3, r4
 8003994:	6864      	ldr	r4, [r4, #4]
 8003996:	e7b2      	b.n	80038fe <_malloc_r+0x32>
 8003998:	4634      	mov	r4, r6
 800399a:	6876      	ldr	r6, [r6, #4]
 800399c:	e7b9      	b.n	8003912 <_malloc_r+0x46>
 800399e:	230c      	movs	r3, #12
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	4638      	mov	r0, r7
 80039a4:	f000 f84c 	bl	8003a40 <__malloc_unlock>
 80039a8:	e7a1      	b.n	80038ee <_malloc_r+0x22>
 80039aa:	6025      	str	r5, [r4, #0]
 80039ac:	e7de      	b.n	800396c <_malloc_r+0xa0>
 80039ae:	bf00      	nop
 80039b0:	200001dc 	.word	0x200001dc

080039b4 <_realloc_r>:
 80039b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	4680      	mov	r8, r0
 80039ba:	4614      	mov	r4, r2
 80039bc:	460e      	mov	r6, r1
 80039be:	b921      	cbnz	r1, 80039ca <_realloc_r+0x16>
 80039c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039c4:	4611      	mov	r1, r2
 80039c6:	f7ff bf81 	b.w	80038cc <_malloc_r>
 80039ca:	b92a      	cbnz	r2, 80039d8 <_realloc_r+0x24>
 80039cc:	f7ff ff12 	bl	80037f4 <_free_r>
 80039d0:	4625      	mov	r5, r4
 80039d2:	4628      	mov	r0, r5
 80039d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d8:	f000 f838 	bl	8003a4c <_malloc_usable_size_r>
 80039dc:	4284      	cmp	r4, r0
 80039de:	4607      	mov	r7, r0
 80039e0:	d802      	bhi.n	80039e8 <_realloc_r+0x34>
 80039e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039e6:	d812      	bhi.n	8003a0e <_realloc_r+0x5a>
 80039e8:	4621      	mov	r1, r4
 80039ea:	4640      	mov	r0, r8
 80039ec:	f7ff ff6e 	bl	80038cc <_malloc_r>
 80039f0:	4605      	mov	r5, r0
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d0ed      	beq.n	80039d2 <_realloc_r+0x1e>
 80039f6:	42bc      	cmp	r4, r7
 80039f8:	4622      	mov	r2, r4
 80039fa:	4631      	mov	r1, r6
 80039fc:	bf28      	it	cs
 80039fe:	463a      	movcs	r2, r7
 8003a00:	f7ff fed0 	bl	80037a4 <memcpy>
 8003a04:	4631      	mov	r1, r6
 8003a06:	4640      	mov	r0, r8
 8003a08:	f7ff fef4 	bl	80037f4 <_free_r>
 8003a0c:	e7e1      	b.n	80039d2 <_realloc_r+0x1e>
 8003a0e:	4635      	mov	r5, r6
 8003a10:	e7df      	b.n	80039d2 <_realloc_r+0x1e>
	...

08003a14 <_sbrk_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4d06      	ldr	r5, [pc, #24]	; (8003a30 <_sbrk_r+0x1c>)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	602b      	str	r3, [r5, #0]
 8003a20:	f7fd fa08 	bl	8000e34 <_sbrk>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_sbrk_r+0x1a>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_sbrk_r+0x1a>
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	200001e4 	.word	0x200001e4

08003a34 <__malloc_lock>:
 8003a34:	4801      	ldr	r0, [pc, #4]	; (8003a3c <__malloc_lock+0x8>)
 8003a36:	f000 b811 	b.w	8003a5c <__retarget_lock_acquire_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	200001e8 	.word	0x200001e8

08003a40 <__malloc_unlock>:
 8003a40:	4801      	ldr	r0, [pc, #4]	; (8003a48 <__malloc_unlock+0x8>)
 8003a42:	f000 b80c 	b.w	8003a5e <__retarget_lock_release_recursive>
 8003a46:	bf00      	nop
 8003a48:	200001e8 	.word	0x200001e8

08003a4c <_malloc_usable_size_r>:
 8003a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a50:	1f18      	subs	r0, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfbc      	itt	lt
 8003a56:	580b      	ldrlt	r3, [r1, r0]
 8003a58:	18c0      	addlt	r0, r0, r3
 8003a5a:	4770      	bx	lr

08003a5c <__retarget_lock_acquire_recursive>:
 8003a5c:	4770      	bx	lr

08003a5e <__retarget_lock_release_recursive>:
 8003a5e:	4770      	bx	lr

08003a60 <_init>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr

08003a6c <_fini>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr
